
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d4  080034d4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080034d4  080034d4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034d4  080034d4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080034dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000006c  08003548  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003548  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fcc  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c93  00000000  00000000  0002a061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017427  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da92  00000000  00000000  000445af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082718  00000000  00000000  00052041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a14  00000000  00000000  000d47ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800349c 	.word	0x0800349c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	0800349c 	.word	0x0800349c

0800014c <counter_horizontal>:
 *  Created on: Nov 15, 2022
 *      Author: ADMIN
 */
#include "counter.h"
int convert_counter = 0;
void counter_horizontal(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(status_horizontal == RED){
 8000150:	4b92      	ldr	r3, [pc, #584]	; (800039c <counter_horizontal+0x250>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d15e      	bne.n	8000216 <counter_horizontal+0xca>
		if(convert_counter == 1){
 8000158:	4b91      	ldr	r3, [pc, #580]	; (80003a0 <counter_horizontal+0x254>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d10a      	bne.n	8000176 <counter_horizontal+0x2a>
			led_buffer[0]--;
 8000160:	4b90      	ldr	r3, [pc, #576]	; (80003a4 <counter_horizontal+0x258>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	3b01      	subs	r3, #1
 8000166:	4a8f      	ldr	r2, [pc, #572]	; (80003a4 <counter_horizontal+0x258>)
 8000168:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 10;
 800016a:	4b8e      	ldr	r3, [pc, #568]	; (80003a4 <counter_horizontal+0x258>)
 800016c:	220a      	movs	r2, #10
 800016e:	605a      	str	r2, [r3, #4]
			convert_counter = 0;
 8000170:	4b8b      	ldr	r3, [pc, #556]	; (80003a0 <counter_horizontal+0x254>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
		}
		if(led_buffer[0] >= 1 && led_buffer[1] == 0){
 8000176:	4b8b      	ldr	r3, [pc, #556]	; (80003a4 <counter_horizontal+0x258>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	dd0b      	ble.n	8000196 <counter_horizontal+0x4a>
 800017e:	4b89      	ldr	r3, [pc, #548]	; (80003a4 <counter_horizontal+0x258>)
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d107      	bne.n	8000196 <counter_horizontal+0x4a>
			led_buffer[0]--;
 8000186:	4b87      	ldr	r3, [pc, #540]	; (80003a4 <counter_horizontal+0x258>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	3b01      	subs	r3, #1
 800018c:	4a85      	ldr	r2, [pc, #532]	; (80003a4 <counter_horizontal+0x258>)
 800018e:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 10;
 8000190:	4b84      	ldr	r3, [pc, #528]	; (80003a4 <counter_horizontal+0x258>)
 8000192:	220a      	movs	r2, #10
 8000194:	605a      	str	r2, [r3, #4]
		}
		led_buffer[1]--;
 8000196:	4b83      	ldr	r3, [pc, #524]	; (80003a4 <counter_horizontal+0x258>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	3b01      	subs	r3, #1
 800019c:	4a81      	ldr	r2, [pc, #516]	; (80003a4 <counter_horizontal+0x258>)
 800019e:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] == 0){
 80001a0:	4b80      	ldr	r3, [pc, #512]	; (80003a4 <counter_horizontal+0x258>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	f040 80f4 	bne.w	8000392 <counter_horizontal+0x246>
			if(led_buffer[0] == 0){
 80001aa:	4b7e      	ldr	r3, [pc, #504]	; (80003a4 <counter_horizontal+0x258>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d128      	bne.n	8000204 <counter_horizontal+0xb8>
				if(MAX_GREEN >= 10){
 80001b2:	4b7d      	ldr	r3, [pc, #500]	; (80003a8 <counter_horizontal+0x25c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2b09      	cmp	r3, #9
 80001b8:	dd19      	ble.n	80001ee <counter_horizontal+0xa2>
					led_buffer[0] = MAX_GREEN/10;
 80001ba:	4b7b      	ldr	r3, [pc, #492]	; (80003a8 <counter_horizontal+0x25c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a7b      	ldr	r2, [pc, #492]	; (80003ac <counter_horizontal+0x260>)
 80001c0:	fb82 1203 	smull	r1, r2, r2, r3
 80001c4:	1092      	asrs	r2, r2, #2
 80001c6:	17db      	asrs	r3, r3, #31
 80001c8:	1ad3      	subs	r3, r2, r3
 80001ca:	4a76      	ldr	r2, [pc, #472]	; (80003a4 <counter_horizontal+0x258>)
 80001cc:	6013      	str	r3, [r2, #0]
					led_buffer[1] = MAX_GREEN%10;
 80001ce:	4b76      	ldr	r3, [pc, #472]	; (80003a8 <counter_horizontal+0x25c>)
 80001d0:	6819      	ldr	r1, [r3, #0]
 80001d2:	4b76      	ldr	r3, [pc, #472]	; (80003ac <counter_horizontal+0x260>)
 80001d4:	fb83 2301 	smull	r2, r3, r3, r1
 80001d8:	109a      	asrs	r2, r3, #2
 80001da:	17cb      	asrs	r3, r1, #31
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	4613      	mov	r3, r2
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	4413      	add	r3, r2
 80001e4:	005b      	lsls	r3, r3, #1
 80001e6:	1aca      	subs	r2, r1, r3
 80001e8:	4b6e      	ldr	r3, [pc, #440]	; (80003a4 <counter_horizontal+0x258>)
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	e003      	b.n	80001f6 <counter_horizontal+0xaa>
				} else {
					led_buffer[1] = MAX_GREEN;
 80001ee:	4b6e      	ldr	r3, [pc, #440]	; (80003a8 <counter_horizontal+0x25c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a6c      	ldr	r2, [pc, #432]	; (80003a4 <counter_horizontal+0x258>)
 80001f4:	6053      	str	r3, [r2, #4]
				}


				status_horizontal = GREEN;
 80001f6:	4b69      	ldr	r3, [pc, #420]	; (800039c <counter_horizontal+0x250>)
 80001f8:	2202      	movs	r2, #2
 80001fa:	601a      	str	r2, [r3, #0]
				convert_led_horizontal = 1;
 80001fc:	4b6c      	ldr	r3, [pc, #432]	; (80003b0 <counter_horizontal+0x264>)
 80001fe:	2201      	movs	r2, #1
 8000200:	601a      	str	r2, [r3, #0]
					convert_counter = 1;
				}
			}
		}
	}
}
 8000202:	e0c6      	b.n	8000392 <counter_horizontal+0x246>
				if(convert_counter == 0){
 8000204:	4b66      	ldr	r3, [pc, #408]	; (80003a0 <counter_horizontal+0x254>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	f040 80c2 	bne.w	8000392 <counter_horizontal+0x246>
					convert_counter = 1;
 800020e:	4b64      	ldr	r3, [pc, #400]	; (80003a0 <counter_horizontal+0x254>)
 8000210:	2201      	movs	r2, #1
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	e0bd      	b.n	8000392 <counter_horizontal+0x246>
	} else if(status_horizontal == GREEN){
 8000216:	4b61      	ldr	r3, [pc, #388]	; (800039c <counter_horizontal+0x250>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b02      	cmp	r3, #2
 800021c:	d15d      	bne.n	80002da <counter_horizontal+0x18e>
		if(convert_counter == 1){
 800021e:	4b60      	ldr	r3, [pc, #384]	; (80003a0 <counter_horizontal+0x254>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d10a      	bne.n	800023c <counter_horizontal+0xf0>
			led_buffer[0]--;
 8000226:	4b5f      	ldr	r3, [pc, #380]	; (80003a4 <counter_horizontal+0x258>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	3b01      	subs	r3, #1
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <counter_horizontal+0x258>)
 800022e:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 10;
 8000230:	4b5c      	ldr	r3, [pc, #368]	; (80003a4 <counter_horizontal+0x258>)
 8000232:	220a      	movs	r2, #10
 8000234:	605a      	str	r2, [r3, #4]
			convert_counter = 0;
 8000236:	4b5a      	ldr	r3, [pc, #360]	; (80003a0 <counter_horizontal+0x254>)
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
		if(led_buffer[0] >= 1 && led_buffer[1] == 0){
 800023c:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <counter_horizontal+0x258>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	dd0b      	ble.n	800025c <counter_horizontal+0x110>
 8000244:	4b57      	ldr	r3, [pc, #348]	; (80003a4 <counter_horizontal+0x258>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d107      	bne.n	800025c <counter_horizontal+0x110>
			led_buffer[0]--;
 800024c:	4b55      	ldr	r3, [pc, #340]	; (80003a4 <counter_horizontal+0x258>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	4a54      	ldr	r2, [pc, #336]	; (80003a4 <counter_horizontal+0x258>)
 8000254:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 10;
 8000256:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <counter_horizontal+0x258>)
 8000258:	220a      	movs	r2, #10
 800025a:	605a      	str	r2, [r3, #4]
		led_buffer[1]--;
 800025c:	4b51      	ldr	r3, [pc, #324]	; (80003a4 <counter_horizontal+0x258>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	3b01      	subs	r3, #1
 8000262:	4a50      	ldr	r2, [pc, #320]	; (80003a4 <counter_horizontal+0x258>)
 8000264:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] == 0){
 8000266:	4b4f      	ldr	r3, [pc, #316]	; (80003a4 <counter_horizontal+0x258>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8091 	bne.w	8000392 <counter_horizontal+0x246>
			if(led_buffer[0] == 0){
 8000270:	4b4c      	ldr	r3, [pc, #304]	; (80003a4 <counter_horizontal+0x258>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d128      	bne.n	80002ca <counter_horizontal+0x17e>
			if(MAX_YELLOW >= 10){
 8000278:	4b4e      	ldr	r3, [pc, #312]	; (80003b4 <counter_horizontal+0x268>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b09      	cmp	r3, #9
 800027e:	dd19      	ble.n	80002b4 <counter_horizontal+0x168>
				led_buffer[0] = MAX_YELLOW/10;
 8000280:	4b4c      	ldr	r3, [pc, #304]	; (80003b4 <counter_horizontal+0x268>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a49      	ldr	r2, [pc, #292]	; (80003ac <counter_horizontal+0x260>)
 8000286:	fb82 1203 	smull	r1, r2, r2, r3
 800028a:	1092      	asrs	r2, r2, #2
 800028c:	17db      	asrs	r3, r3, #31
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	4a44      	ldr	r2, [pc, #272]	; (80003a4 <counter_horizontal+0x258>)
 8000292:	6013      	str	r3, [r2, #0]
				led_buffer[1] = MAX_YELLOW%10;
 8000294:	4b47      	ldr	r3, [pc, #284]	; (80003b4 <counter_horizontal+0x268>)
 8000296:	6819      	ldr	r1, [r3, #0]
 8000298:	4b44      	ldr	r3, [pc, #272]	; (80003ac <counter_horizontal+0x260>)
 800029a:	fb83 2301 	smull	r2, r3, r3, r1
 800029e:	109a      	asrs	r2, r3, #2
 80002a0:	17cb      	asrs	r3, r1, #31
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	4613      	mov	r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	1aca      	subs	r2, r1, r3
 80002ae:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <counter_horizontal+0x258>)
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	e003      	b.n	80002bc <counter_horizontal+0x170>
				led_buffer[1] = MAX_YELLOW;
 80002b4:	4b3f      	ldr	r3, [pc, #252]	; (80003b4 <counter_horizontal+0x268>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a3a      	ldr	r2, [pc, #232]	; (80003a4 <counter_horizontal+0x258>)
 80002ba:	6053      	str	r3, [r2, #4]
			status_horizontal = YELLOW;
 80002bc:	4b37      	ldr	r3, [pc, #220]	; (800039c <counter_horizontal+0x250>)
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
			convert_led_horizontal = 1;
 80002c2:	4b3b      	ldr	r3, [pc, #236]	; (80003b0 <counter_horizontal+0x264>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
}
 80002c8:	e063      	b.n	8000392 <counter_horizontal+0x246>
				if(convert_counter == 0){
 80002ca:	4b35      	ldr	r3, [pc, #212]	; (80003a0 <counter_horizontal+0x254>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d15f      	bne.n	8000392 <counter_horizontal+0x246>
					convert_counter = 1;
 80002d2:	4b33      	ldr	r3, [pc, #204]	; (80003a0 <counter_horizontal+0x254>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	e05b      	b.n	8000392 <counter_horizontal+0x246>
		if(convert_counter == 1){
 80002da:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <counter_horizontal+0x254>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d10a      	bne.n	80002f8 <counter_horizontal+0x1ac>
			led_buffer[0]--;
 80002e2:	4b30      	ldr	r3, [pc, #192]	; (80003a4 <counter_horizontal+0x258>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	4a2e      	ldr	r2, [pc, #184]	; (80003a4 <counter_horizontal+0x258>)
 80002ea:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 10;
 80002ec:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <counter_horizontal+0x258>)
 80002ee:	220a      	movs	r2, #10
 80002f0:	605a      	str	r2, [r3, #4]
			convert_counter = 0;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <counter_horizontal+0x254>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
		if(led_buffer[0] >= 1 && led_buffer[1] == 0){
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <counter_horizontal+0x258>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dd0b      	ble.n	8000318 <counter_horizontal+0x1cc>
 8000300:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <counter_horizontal+0x258>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d107      	bne.n	8000318 <counter_horizontal+0x1cc>
			led_buffer[0]--;
 8000308:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <counter_horizontal+0x258>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	4a25      	ldr	r2, [pc, #148]	; (80003a4 <counter_horizontal+0x258>)
 8000310:	6013      	str	r3, [r2, #0]
			led_buffer[1] = 10;
 8000312:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <counter_horizontal+0x258>)
 8000314:	220a      	movs	r2, #10
 8000316:	605a      	str	r2, [r3, #4]
		led_buffer[1]--;
 8000318:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <counter_horizontal+0x258>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	3b01      	subs	r3, #1
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <counter_horizontal+0x258>)
 8000320:	6053      	str	r3, [r2, #4]
		if(led_buffer[1] == 0){
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <counter_horizontal+0x258>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d133      	bne.n	8000392 <counter_horizontal+0x246>
			if(led_buffer[0] == 0){
 800032a:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <counter_horizontal+0x258>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d128      	bne.n	8000384 <counter_horizontal+0x238>
			if(MAX_RED >= 10){
 8000332:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <counter_horizontal+0x26c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b09      	cmp	r3, #9
 8000338:	dd19      	ble.n	800036e <counter_horizontal+0x222>
				led_buffer[0] = MAX_RED/10;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <counter_horizontal+0x26c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <counter_horizontal+0x260>)
 8000340:	fb82 1203 	smull	r1, r2, r2, r3
 8000344:	1092      	asrs	r2, r2, #2
 8000346:	17db      	asrs	r3, r3, #31
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <counter_horizontal+0x258>)
 800034c:	6013      	str	r3, [r2, #0]
				led_buffer[1] = MAX_RED%10;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <counter_horizontal+0x26c>)
 8000350:	6819      	ldr	r1, [r3, #0]
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <counter_horizontal+0x260>)
 8000354:	fb83 2301 	smull	r2, r3, r3, r1
 8000358:	109a      	asrs	r2, r3, #2
 800035a:	17cb      	asrs	r3, r1, #31
 800035c:	1ad2      	subs	r2, r2, r3
 800035e:	4613      	mov	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	1aca      	subs	r2, r1, r3
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <counter_horizontal+0x258>)
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	e003      	b.n	8000376 <counter_horizontal+0x22a>
				led_buffer[1] = MAX_RED;
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <counter_horizontal+0x26c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <counter_horizontal+0x258>)
 8000374:	6053      	str	r3, [r2, #4]
			status_horizontal = RED;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <counter_horizontal+0x250>)
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
			convert_led_horizontal = 1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <counter_horizontal+0x264>)
 800037e:	2201      	movs	r2, #1
 8000380:	601a      	str	r2, [r3, #0]
}
 8000382:	e006      	b.n	8000392 <counter_horizontal+0x246>
				if(convert_counter == 0){
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <counter_horizontal+0x254>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d102      	bne.n	8000392 <counter_horizontal+0x246>
					convert_counter = 1;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <counter_horizontal+0x254>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000090 	.word	0x20000090
 80003a0:	20000088 	.word	0x20000088
 80003a4:	20000008 	.word	0x20000008
 80003a8:	20000020 	.word	0x20000020
 80003ac:	66666667 	.word	0x66666667
 80003b0:	20000098 	.word	0x20000098
 80003b4:	2000001c 	.word	0x2000001c
 80003b8:	20000018 	.word	0x20000018

080003bc <counter_vertical>:
int convert_counter2 = 0;
void counter_vertical(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	if(status_vertical == RED){
 80003c0:	4b92      	ldr	r3, [pc, #584]	; (800060c <counter_vertical+0x250>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d15e      	bne.n	8000486 <counter_vertical+0xca>
		if(convert_counter2 == 1){
 80003c8:	4b91      	ldr	r3, [pc, #580]	; (8000610 <counter_vertical+0x254>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10a      	bne.n	80003e6 <counter_vertical+0x2a>
			led_buffer[2]--;
 80003d0:	4b90      	ldr	r3, [pc, #576]	; (8000614 <counter_vertical+0x258>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	4a8f      	ldr	r2, [pc, #572]	; (8000614 <counter_vertical+0x258>)
 80003d8:	6093      	str	r3, [r2, #8]
			led_buffer[3] = 10;
 80003da:	4b8e      	ldr	r3, [pc, #568]	; (8000614 <counter_vertical+0x258>)
 80003dc:	220a      	movs	r2, #10
 80003de:	60da      	str	r2, [r3, #12]
			convert_counter2 = 0;
 80003e0:	4b8b      	ldr	r3, [pc, #556]	; (8000610 <counter_vertical+0x254>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		}
		if(led_buffer[2] >= 1 && led_buffer[3] == 0){
 80003e6:	4b8b      	ldr	r3, [pc, #556]	; (8000614 <counter_vertical+0x258>)
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dd0b      	ble.n	8000406 <counter_vertical+0x4a>
 80003ee:	4b89      	ldr	r3, [pc, #548]	; (8000614 <counter_vertical+0x258>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d107      	bne.n	8000406 <counter_vertical+0x4a>
			led_buffer[2]--;
 80003f6:	4b87      	ldr	r3, [pc, #540]	; (8000614 <counter_vertical+0x258>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a85      	ldr	r2, [pc, #532]	; (8000614 <counter_vertical+0x258>)
 80003fe:	6093      	str	r3, [r2, #8]
			led_buffer[3] = 10;
 8000400:	4b84      	ldr	r3, [pc, #528]	; (8000614 <counter_vertical+0x258>)
 8000402:	220a      	movs	r2, #10
 8000404:	60da      	str	r2, [r3, #12]
		}
		led_buffer[3]--;
 8000406:	4b83      	ldr	r3, [pc, #524]	; (8000614 <counter_vertical+0x258>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a81      	ldr	r2, [pc, #516]	; (8000614 <counter_vertical+0x258>)
 800040e:	60d3      	str	r3, [r2, #12]
		if(led_buffer[3] == 0){
 8000410:	4b80      	ldr	r3, [pc, #512]	; (8000614 <counter_vertical+0x258>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	2b00      	cmp	r3, #0
 8000416:	f040 80f4 	bne.w	8000602 <counter_vertical+0x246>
			if(led_buffer[2] == 0){
 800041a:	4b7e      	ldr	r3, [pc, #504]	; (8000614 <counter_vertical+0x258>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d128      	bne.n	8000474 <counter_vertical+0xb8>
				if(MAX_GREEN >= 10){
 8000422:	4b7d      	ldr	r3, [pc, #500]	; (8000618 <counter_vertical+0x25c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b09      	cmp	r3, #9
 8000428:	dd19      	ble.n	800045e <counter_vertical+0xa2>
					led_buffer[2] = MAX_GREEN/10;
 800042a:	4b7b      	ldr	r3, [pc, #492]	; (8000618 <counter_vertical+0x25c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a7b      	ldr	r2, [pc, #492]	; (800061c <counter_vertical+0x260>)
 8000430:	fb82 1203 	smull	r1, r2, r2, r3
 8000434:	1092      	asrs	r2, r2, #2
 8000436:	17db      	asrs	r3, r3, #31
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a76      	ldr	r2, [pc, #472]	; (8000614 <counter_vertical+0x258>)
 800043c:	6093      	str	r3, [r2, #8]
					led_buffer[3] = MAX_GREEN%10;
 800043e:	4b76      	ldr	r3, [pc, #472]	; (8000618 <counter_vertical+0x25c>)
 8000440:	6819      	ldr	r1, [r3, #0]
 8000442:	4b76      	ldr	r3, [pc, #472]	; (800061c <counter_vertical+0x260>)
 8000444:	fb83 2301 	smull	r2, r3, r3, r1
 8000448:	109a      	asrs	r2, r3, #2
 800044a:	17cb      	asrs	r3, r1, #31
 800044c:	1ad2      	subs	r2, r2, r3
 800044e:	4613      	mov	r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	1aca      	subs	r2, r1, r3
 8000458:	4b6e      	ldr	r3, [pc, #440]	; (8000614 <counter_vertical+0x258>)
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	e003      	b.n	8000466 <counter_vertical+0xaa>
				} else {
					led_buffer[3] = MAX_GREEN;
 800045e:	4b6e      	ldr	r3, [pc, #440]	; (8000618 <counter_vertical+0x25c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a6c      	ldr	r2, [pc, #432]	; (8000614 <counter_vertical+0x258>)
 8000464:	60d3      	str	r3, [r2, #12]
				}


				status_vertical = GREEN;
 8000466:	4b69      	ldr	r3, [pc, #420]	; (800060c <counter_vertical+0x250>)
 8000468:	2202      	movs	r2, #2
 800046a:	601a      	str	r2, [r3, #0]
				convert_led_vertical = 1;
 800046c:	4b6c      	ldr	r3, [pc, #432]	; (8000620 <counter_vertical+0x264>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
					convert_counter2 = 1;
				}
			}
		}
	}
}
 8000472:	e0c6      	b.n	8000602 <counter_vertical+0x246>
				if(convert_counter2 == 0){
 8000474:	4b66      	ldr	r3, [pc, #408]	; (8000610 <counter_vertical+0x254>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	f040 80c2 	bne.w	8000602 <counter_vertical+0x246>
					convert_counter2 = 1;
 800047e:	4b64      	ldr	r3, [pc, #400]	; (8000610 <counter_vertical+0x254>)
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	e0bd      	b.n	8000602 <counter_vertical+0x246>
	} else if(status_vertical == GREEN){
 8000486:	4b61      	ldr	r3, [pc, #388]	; (800060c <counter_vertical+0x250>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d15d      	bne.n	800054a <counter_vertical+0x18e>
		if(convert_counter2 == 1){
 800048e:	4b60      	ldr	r3, [pc, #384]	; (8000610 <counter_vertical+0x254>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d10a      	bne.n	80004ac <counter_vertical+0xf0>
			led_buffer[2]--;
 8000496:	4b5f      	ldr	r3, [pc, #380]	; (8000614 <counter_vertical+0x258>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	3b01      	subs	r3, #1
 800049c:	4a5d      	ldr	r2, [pc, #372]	; (8000614 <counter_vertical+0x258>)
 800049e:	6093      	str	r3, [r2, #8]
			led_buffer[3] = 10;
 80004a0:	4b5c      	ldr	r3, [pc, #368]	; (8000614 <counter_vertical+0x258>)
 80004a2:	220a      	movs	r2, #10
 80004a4:	60da      	str	r2, [r3, #12]
			convert_counter2 = 0;
 80004a6:	4b5a      	ldr	r3, [pc, #360]	; (8000610 <counter_vertical+0x254>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
		if(led_buffer[2] >= 1 && led_buffer[3] == 0){
 80004ac:	4b59      	ldr	r3, [pc, #356]	; (8000614 <counter_vertical+0x258>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dd0b      	ble.n	80004cc <counter_vertical+0x110>
 80004b4:	4b57      	ldr	r3, [pc, #348]	; (8000614 <counter_vertical+0x258>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d107      	bne.n	80004cc <counter_vertical+0x110>
			led_buffer[2]--;
 80004bc:	4b55      	ldr	r3, [pc, #340]	; (8000614 <counter_vertical+0x258>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a54      	ldr	r2, [pc, #336]	; (8000614 <counter_vertical+0x258>)
 80004c4:	6093      	str	r3, [r2, #8]
			led_buffer[3] = 10;
 80004c6:	4b53      	ldr	r3, [pc, #332]	; (8000614 <counter_vertical+0x258>)
 80004c8:	220a      	movs	r2, #10
 80004ca:	60da      	str	r2, [r3, #12]
		led_buffer[3]--;
 80004cc:	4b51      	ldr	r3, [pc, #324]	; (8000614 <counter_vertical+0x258>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a50      	ldr	r2, [pc, #320]	; (8000614 <counter_vertical+0x258>)
 80004d4:	60d3      	str	r3, [r2, #12]
		if(led_buffer[3] == 0){
 80004d6:	4b4f      	ldr	r3, [pc, #316]	; (8000614 <counter_vertical+0x258>)
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8091 	bne.w	8000602 <counter_vertical+0x246>
			if(led_buffer[2] == 0){
 80004e0:	4b4c      	ldr	r3, [pc, #304]	; (8000614 <counter_vertical+0x258>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d128      	bne.n	800053a <counter_vertical+0x17e>
			if(MAX_YELLOW >= 10){
 80004e8:	4b4e      	ldr	r3, [pc, #312]	; (8000624 <counter_vertical+0x268>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	dd19      	ble.n	8000524 <counter_vertical+0x168>
				led_buffer[2] = MAX_YELLOW/10;
 80004f0:	4b4c      	ldr	r3, [pc, #304]	; (8000624 <counter_vertical+0x268>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a49      	ldr	r2, [pc, #292]	; (800061c <counter_vertical+0x260>)
 80004f6:	fb82 1203 	smull	r1, r2, r2, r3
 80004fa:	1092      	asrs	r2, r2, #2
 80004fc:	17db      	asrs	r3, r3, #31
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	4a44      	ldr	r2, [pc, #272]	; (8000614 <counter_vertical+0x258>)
 8000502:	6093      	str	r3, [r2, #8]
				led_buffer[3] = MAX_YELLOW%10;
 8000504:	4b47      	ldr	r3, [pc, #284]	; (8000624 <counter_vertical+0x268>)
 8000506:	6819      	ldr	r1, [r3, #0]
 8000508:	4b44      	ldr	r3, [pc, #272]	; (800061c <counter_vertical+0x260>)
 800050a:	fb83 2301 	smull	r2, r3, r3, r1
 800050e:	109a      	asrs	r2, r3, #2
 8000510:	17cb      	asrs	r3, r1, #31
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	1aca      	subs	r2, r1, r3
 800051e:	4b3d      	ldr	r3, [pc, #244]	; (8000614 <counter_vertical+0x258>)
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	e003      	b.n	800052c <counter_vertical+0x170>
				led_buffer[3] = MAX_YELLOW;
 8000524:	4b3f      	ldr	r3, [pc, #252]	; (8000624 <counter_vertical+0x268>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a3a      	ldr	r2, [pc, #232]	; (8000614 <counter_vertical+0x258>)
 800052a:	60d3      	str	r3, [r2, #12]
			status_vertical = YELLOW;
 800052c:	4b37      	ldr	r3, [pc, #220]	; (800060c <counter_vertical+0x250>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
			convert_led_vertical = 1;
 8000532:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <counter_vertical+0x264>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	e063      	b.n	8000602 <counter_vertical+0x246>
				if(convert_counter2 == 0){
 800053a:	4b35      	ldr	r3, [pc, #212]	; (8000610 <counter_vertical+0x254>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d15f      	bne.n	8000602 <counter_vertical+0x246>
					convert_counter2 = 1;
 8000542:	4b33      	ldr	r3, [pc, #204]	; (8000610 <counter_vertical+0x254>)
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	e05b      	b.n	8000602 <counter_vertical+0x246>
		if(convert_counter2 == 1){
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <counter_vertical+0x254>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10a      	bne.n	8000568 <counter_vertical+0x1ac>
			led_buffer[2]--;
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <counter_vertical+0x258>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <counter_vertical+0x258>)
 800055a:	6093      	str	r3, [r2, #8]
			led_buffer[3] = 10;
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <counter_vertical+0x258>)
 800055e:	220a      	movs	r2, #10
 8000560:	60da      	str	r2, [r3, #12]
			convert_counter2 = 0;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <counter_vertical+0x254>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
		if(led_buffer[2] >= 1 && led_buffer[3] == 0){
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <counter_vertical+0x258>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	2b00      	cmp	r3, #0
 800056e:	dd0b      	ble.n	8000588 <counter_vertical+0x1cc>
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <counter_vertical+0x258>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d107      	bne.n	8000588 <counter_vertical+0x1cc>
			led_buffer[2]--;
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <counter_vertical+0x258>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <counter_vertical+0x258>)
 8000580:	6093      	str	r3, [r2, #8]
			led_buffer[3] = 10;
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <counter_vertical+0x258>)
 8000584:	220a      	movs	r2, #10
 8000586:	60da      	str	r2, [r3, #12]
		led_buffer[3]--;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <counter_vertical+0x258>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a21      	ldr	r2, [pc, #132]	; (8000614 <counter_vertical+0x258>)
 8000590:	60d3      	str	r3, [r2, #12]
		if(led_buffer[3] == 0){
 8000592:	4b20      	ldr	r3, [pc, #128]	; (8000614 <counter_vertical+0x258>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d133      	bne.n	8000602 <counter_vertical+0x246>
			if(led_buffer[2] == 0){
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <counter_vertical+0x258>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d128      	bne.n	80005f4 <counter_vertical+0x238>
			if(MAX_RED >= 10){
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <counter_vertical+0x26c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	dd19      	ble.n	80005de <counter_vertical+0x222>
				led_buffer[2] = MAX_RED/10;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <counter_vertical+0x26c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1b      	ldr	r2, [pc, #108]	; (800061c <counter_vertical+0x260>)
 80005b0:	fb82 1203 	smull	r1, r2, r2, r3
 80005b4:	1092      	asrs	r2, r2, #2
 80005b6:	17db      	asrs	r3, r3, #31
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <counter_vertical+0x258>)
 80005bc:	6093      	str	r3, [r2, #8]
				led_buffer[3] = MAX_RED%10;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <counter_vertical+0x26c>)
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <counter_vertical+0x260>)
 80005c4:	fb83 2301 	smull	r2, r3, r3, r1
 80005c8:	109a      	asrs	r2, r3, #2
 80005ca:	17cb      	asrs	r3, r1, #31
 80005cc:	1ad2      	subs	r2, r2, r3
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	1aca      	subs	r2, r1, r3
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <counter_vertical+0x258>)
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	e003      	b.n	80005e6 <counter_vertical+0x22a>
				led_buffer[3] = MAX_RED;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <counter_vertical+0x26c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <counter_vertical+0x258>)
 80005e4:	60d3      	str	r3, [r2, #12]
			status_vertical = RED;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <counter_vertical+0x250>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
			convert_led_vertical = 1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <counter_vertical+0x264>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	e006      	b.n	8000602 <counter_vertical+0x246>
				if(convert_counter2 == 0){
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <counter_vertical+0x254>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <counter_vertical+0x246>
					convert_counter2 = 1;
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <counter_vertical+0x254>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000
 8000610:	2000008c 	.word	0x2000008c
 8000614:	20000008 	.word	0x20000008
 8000618:	20000020 	.word	0x20000020
 800061c:	66666667 	.word	0x66666667
 8000620:	2000009c 	.word	0x2000009c
 8000624:	2000001c 	.word	0x2000001c
 8000628:	20000018 	.word	0x20000018

0800062c <display>:
 */


#include "display.h"

void display(){
 800062c:	b598      	push	{r3, r4, r7, lr}
 800062e:	af00      	add	r7, sp, #0
	  if(status_mode == MODE1){
 8000630:	4bb0      	ldr	r3, [pc, #704]	; (80008f4 <display+0x2c8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b15      	cmp	r3, #21
 8000636:	d148      	bne.n	80006ca <display+0x9e>
		  if(timer1_flag == 1){
 8000638:	4baf      	ldr	r3, [pc, #700]	; (80008f8 <display+0x2cc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	f040 819a 	bne.w	8000976 <display+0x34a>
		  		  if(convert_flag == 0){
 8000642:	4bae      	ldr	r3, [pc, #696]	; (80008fc <display+0x2d0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11f      	bne.n	800068a <display+0x5e>
		  				HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , SET );
 800064a:	2201      	movs	r2, #1
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	48ac      	ldr	r0, [pc, #688]	; (8000900 <display+0x2d4>)
 8000650:	f001 ff13 	bl	800247a <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , RESET );
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065a:	48a9      	ldr	r0, [pc, #676]	; (8000900 <display+0x2d4>)
 800065c:	f001 ff0d 	bl	800247a <HAL_GPIO_WritePin>
		  			  display7SEGforMode(status_mode,led_buffer[1], led_buffer[3]);
 8000660:	4ba4      	ldr	r3, [pc, #656]	; (80008f4 <display+0x2c8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4aa7      	ldr	r2, [pc, #668]	; (8000904 <display+0x2d8>)
 8000666:	6851      	ldr	r1, [r2, #4]
 8000668:	4aa6      	ldr	r2, [pc, #664]	; (8000904 <display+0x2d8>)
 800066a:	68d2      	ldr	r2, [r2, #12]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f98f 	bl	8000990 <display7SEGforMode>
		  			  convert_flag = 1;
 8000672:	4ba2      	ldr	r3, [pc, #648]	; (80008fc <display+0x2d0>)
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
		  			  setTimer1(500);
 8000678:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800067c:	f001 fa6e 	bl	8001b5c <setTimer1>
		  			  led_horizontal();
 8000680:	f000 fdf6 	bl	8001270 <led_horizontal>
		  			  led_vertical();
 8000684:	f000 fe42 	bl	800130c <led_vertical>
				  setTimer4(500);
				  convert_flag = 0;
				 }
			 }
	  }
}
 8000688:	e175      	b.n	8000976 <display+0x34a>
		  				HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , RESET );
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	489c      	ldr	r0, [pc, #624]	; (8000900 <display+0x2d4>)
 8000690:	f001 fef3 	bl	800247a <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , SET );
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069a:	4899      	ldr	r0, [pc, #612]	; (8000900 <display+0x2d4>)
 800069c:	f001 feed 	bl	800247a <HAL_GPIO_WritePin>
		  			  display7SEGforMode(status_mode,led_buffer[0], led_buffer[2]);
 80006a0:	4b94      	ldr	r3, [pc, #592]	; (80008f4 <display+0x2c8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a97      	ldr	r2, [pc, #604]	; (8000904 <display+0x2d8>)
 80006a6:	6811      	ldr	r1, [r2, #0]
 80006a8:	4a96      	ldr	r2, [pc, #600]	; (8000904 <display+0x2d8>)
 80006aa:	6892      	ldr	r2, [r2, #8]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f96f 	bl	8000990 <display7SEGforMode>
		  			  convert_flag = 0;
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <display+0x2d0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
		  			  setTimer1(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f001 fa4e 	bl	8001b5c <setTimer1>
		  			  counter_horizontal();
 80006c0:	f7ff fd44 	bl	800014c <counter_horizontal>
		  			  counter_vertical();
 80006c4:	f7ff fe7a 	bl	80003bc <counter_vertical>
}
 80006c8:	e155      	b.n	8000976 <display+0x34a>
	  } else if(status_mode == MODE2){
 80006ca:	4b8a      	ldr	r3, [pc, #552]	; (80008f4 <display+0x2c8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b16      	cmp	r3, #22
 80006d0:	d167      	bne.n	80007a2 <display+0x176>
			 if(timer2_flag == 1){
 80006d2:	4b8d      	ldr	r3, [pc, #564]	; (8000908 <display+0x2dc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	f040 814d 	bne.w	8000976 <display+0x34a>
				 if(convert_flag == 0){
 80006dc:	4b87      	ldr	r3, [pc, #540]	; (80008fc <display+0x2d0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d134      	bne.n	800074e <display+0x122>
				HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , SET );
 80006e4:	2201      	movs	r2, #1
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	4885      	ldr	r0, [pc, #532]	; (8000900 <display+0x2d4>)
 80006ea:	f001 fec6 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , RESET );
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	4882      	ldr	r0, [pc, #520]	; (8000900 <display+0x2d4>)
 80006f6:	f001 fec0 	bl	800247a <HAL_GPIO_WritePin>
					display7SEGforMode(status_mode,MAX_RED%10, MAX_RED%10);
 80006fa:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <display+0x2c8>)
 80006fc:	681c      	ldr	r4, [r3, #0]
 80006fe:	4b83      	ldr	r3, [pc, #524]	; (800090c <display+0x2e0>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b83      	ldr	r3, [pc, #524]	; (8000910 <display+0x2e4>)
 8000704:	fb83 1302 	smull	r1, r3, r3, r2
 8000708:	1099      	asrs	r1, r3, #2
 800070a:	17d3      	asrs	r3, r2, #31
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	460b      	mov	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	1ad1      	subs	r1, r2, r3
 8000718:	4b7c      	ldr	r3, [pc, #496]	; (800090c <display+0x2e0>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b7c      	ldr	r3, [pc, #496]	; (8000910 <display+0x2e4>)
 800071e:	fb83 0302 	smull	r0, r3, r3, r2
 8000722:	1098      	asrs	r0, r3, #2
 8000724:	17d3      	asrs	r3, r2, #31
 8000726:	1ac0      	subs	r0, r0, r3
 8000728:	4603      	mov	r3, r0
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4403      	add	r3, r0
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	1ad0      	subs	r0, r2, r3
 8000732:	4602      	mov	r2, r0
 8000734:	4620      	mov	r0, r4
 8000736:	f000 f92b 	bl	8000990 <display7SEGforMode>
				 auto_red();
 800073a:	f000 fe35 	bl	80013a8 <auto_red>
				  setTimer2(500);
 800073e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000742:	f001 fa27 	bl	8001b94 <setTimer2>
				  convert_flag = 1;
 8000746:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <display+0x2d0>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	e113      	b.n	8000976 <display+0x34a>
					HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , RESET );
 800074e:	2200      	movs	r2, #0
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <display+0x2d4>)
 8000754:	f001 fe91 	bl	800247a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , SET );
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	4868      	ldr	r0, [pc, #416]	; (8000900 <display+0x2d4>)
 8000760:	f001 fe8b 	bl	800247a <HAL_GPIO_WritePin>
						display7SEGforMode(status_mode,MAX_RED/10, MAX_RED/10);
 8000764:	4b63      	ldr	r3, [pc, #396]	; (80008f4 <display+0x2c8>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	4b68      	ldr	r3, [pc, #416]	; (800090c <display+0x2e0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a68      	ldr	r2, [pc, #416]	; (8000910 <display+0x2e4>)
 800076e:	fb82 1203 	smull	r1, r2, r2, r3
 8000772:	1092      	asrs	r2, r2, #2
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad1      	subs	r1, r2, r3
 8000778:	4b64      	ldr	r3, [pc, #400]	; (800090c <display+0x2e0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a64      	ldr	r2, [pc, #400]	; (8000910 <display+0x2e4>)
 800077e:	fb82 4203 	smull	r4, r2, r2, r3
 8000782:	1092      	asrs	r2, r2, #2
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	461a      	mov	r2, r3
 800078a:	f000 f901 	bl	8000990 <display7SEGforMode>
				  auto_off();
 800078e:	f000 fe89 	bl	80014a4 <auto_off>
				  setTimer2(500);
 8000792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000796:	f001 f9fd 	bl	8001b94 <setTimer2>
				  convert_flag = 0;
 800079a:	4b58      	ldr	r3, [pc, #352]	; (80008fc <display+0x2d0>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	e0e9      	b.n	8000976 <display+0x34a>
	  } else if(status_mode == MODE3){
 80007a2:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <display+0x2c8>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b17      	cmp	r3, #23
 80007a8:	d167      	bne.n	800087a <display+0x24e>
			 if(timer3_flag == 1){
 80007aa:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <display+0x2e8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	f040 80e1 	bne.w	8000976 <display+0x34a>
				 if(convert_flag == 0){
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <display+0x2d0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d134      	bne.n	8000826 <display+0x1fa>
				HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , SET );
 80007bc:	2201      	movs	r2, #1
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	484f      	ldr	r0, [pc, #316]	; (8000900 <display+0x2d4>)
 80007c2:	f001 fe5a 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , RESET );
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	484c      	ldr	r0, [pc, #304]	; (8000900 <display+0x2d4>)
 80007ce:	f001 fe54 	bl	800247a <HAL_GPIO_WritePin>
					display7SEGforMode(status_mode,MAX_YELLOW%10, MAX_YELLOW%10);
 80007d2:	4b48      	ldr	r3, [pc, #288]	; (80008f4 <display+0x2c8>)
 80007d4:	681c      	ldr	r4, [r3, #0]
 80007d6:	4b50      	ldr	r3, [pc, #320]	; (8000918 <display+0x2ec>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b4d      	ldr	r3, [pc, #308]	; (8000910 <display+0x2e4>)
 80007dc:	fb83 1302 	smull	r1, r3, r3, r2
 80007e0:	1099      	asrs	r1, r3, #2
 80007e2:	17d3      	asrs	r3, r2, #31
 80007e4:	1ac9      	subs	r1, r1, r3
 80007e6:	460b      	mov	r3, r1
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	1ad1      	subs	r1, r2, r3
 80007f0:	4b49      	ldr	r3, [pc, #292]	; (8000918 <display+0x2ec>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b46      	ldr	r3, [pc, #280]	; (8000910 <display+0x2e4>)
 80007f6:	fb83 0302 	smull	r0, r3, r3, r2
 80007fa:	1098      	asrs	r0, r3, #2
 80007fc:	17d3      	asrs	r3, r2, #31
 80007fe:	1ac0      	subs	r0, r0, r3
 8000800:	4603      	mov	r3, r0
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4403      	add	r3, r0
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	1ad0      	subs	r0, r2, r3
 800080a:	4602      	mov	r2, r0
 800080c:	4620      	mov	r0, r4
 800080e:	f000 f8bf 	bl	8000990 <display7SEGforMode>
				 auto_yellow();
 8000812:	f000 fdf3 	bl	80013fc <auto_yellow>
				  setTimer3(500);
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f001 f9d7 	bl	8001bcc <setTimer3>
				  convert_flag = 1;
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <display+0x2d0>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	e0a7      	b.n	8000976 <display+0x34a>
					HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , RESET );
 8000826:	2200      	movs	r2, #0
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	4835      	ldr	r0, [pc, #212]	; (8000900 <display+0x2d4>)
 800082c:	f001 fe25 	bl	800247a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , SET );
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000836:	4832      	ldr	r0, [pc, #200]	; (8000900 <display+0x2d4>)
 8000838:	f001 fe1f 	bl	800247a <HAL_GPIO_WritePin>
						display7SEGforMode(status_mode,MAX_YELLOW/10, MAX_YELLOW/10);
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <display+0x2c8>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	4b35      	ldr	r3, [pc, #212]	; (8000918 <display+0x2ec>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a32      	ldr	r2, [pc, #200]	; (8000910 <display+0x2e4>)
 8000846:	fb82 1203 	smull	r1, r2, r2, r3
 800084a:	1092      	asrs	r2, r2, #2
 800084c:	17db      	asrs	r3, r3, #31
 800084e:	1ad1      	subs	r1, r2, r3
 8000850:	4b31      	ldr	r3, [pc, #196]	; (8000918 <display+0x2ec>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <display+0x2e4>)
 8000856:	fb82 4203 	smull	r4, r2, r2, r3
 800085a:	1092      	asrs	r2, r2, #2
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	461a      	mov	r2, r3
 8000862:	f000 f895 	bl	8000990 <display7SEGforMode>
				  auto_off();
 8000866:	f000 fe1d 	bl	80014a4 <auto_off>
				  setTimer3(500);
 800086a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800086e:	f001 f9ad 	bl	8001bcc <setTimer3>
				  convert_flag = 0;
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <display+0x2d0>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	e07d      	b.n	8000976 <display+0x34a>
			 if(timer4_flag == 1){
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <display+0x2f0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d179      	bne.n	8000976 <display+0x34a>
				 if(convert_flag == 0){
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <display+0x2d0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d14c      	bne.n	8000924 <display+0x2f8>
				HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , SET );
 800088a:	2201      	movs	r2, #1
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <display+0x2d4>)
 8000890:	f001 fdf3 	bl	800247a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , RESET );
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	4819      	ldr	r0, [pc, #100]	; (8000900 <display+0x2d4>)
 800089c:	f001 fded 	bl	800247a <HAL_GPIO_WritePin>
					display7SEGforMode(status_mode,MAX_GREEN%10, MAX_GREEN%10);
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <display+0x2c8>)
 80008a2:	681c      	ldr	r4, [r3, #0]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <display+0x2f4>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <display+0x2e4>)
 80008aa:	fb83 1302 	smull	r1, r3, r3, r2
 80008ae:	1099      	asrs	r1, r3, #2
 80008b0:	17d3      	asrs	r3, r2, #31
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	460b      	mov	r3, r1
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	1ad1      	subs	r1, r2, r3
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <display+0x2f4>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <display+0x2e4>)
 80008c4:	fb83 0302 	smull	r0, r3, r3, r2
 80008c8:	1098      	asrs	r0, r3, #2
 80008ca:	17d3      	asrs	r3, r2, #31
 80008cc:	1ac0      	subs	r0, r0, r3
 80008ce:	4603      	mov	r3, r0
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4403      	add	r3, r0
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	1ad0      	subs	r0, r2, r3
 80008d8:	4602      	mov	r2, r0
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f858 	bl	8000990 <display7SEGforMode>
				 auto_green();
 80008e0:	f000 fdb6 	bl	8001450 <auto_green>
				  setTimer4(500);
 80008e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e8:	f001 f98c 	bl	8001c04 <setTimer4>
				  convert_flag = 1;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <display+0x2d0>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	e040      	b.n	8000976 <display+0x34a>
 80008f4:	20000004 	.word	0x20000004
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	20000094 	.word	0x20000094
 8000900:	40010c00 	.word	0x40010c00
 8000904:	20000008 	.word	0x20000008
 8000908:	200000b8 	.word	0x200000b8
 800090c:	20000018 	.word	0x20000018
 8000910:	66666667 	.word	0x66666667
 8000914:	200000c0 	.word	0x200000c0
 8000918:	2000001c 	.word	0x2000001c
 800091c:	200000c8 	.word	0x200000c8
 8000920:	20000020 	.word	0x20000020
					HAL_GPIO_WritePin ( EN0_GPIO_Port, EN0_Pin , RESET );
 8000924:	2200      	movs	r2, #0
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <display+0x350>)
 800092a:	f001 fda6 	bl	800247a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( EN1_GPIO_Port, EN1_Pin , SET );
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <display+0x350>)
 8000936:	f001 fda0 	bl	800247a <HAL_GPIO_WritePin>
						display7SEGforMode(status_mode,MAX_GREEN/10, MAX_GREEN/10);
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <display+0x354>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <display+0x358>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <display+0x35c>)
 8000944:	fb82 1203 	smull	r1, r2, r2, r3
 8000948:	1092      	asrs	r2, r2, #2
 800094a:	17db      	asrs	r3, r3, #31
 800094c:	1ad1      	subs	r1, r2, r3
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <display+0x358>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <display+0x35c>)
 8000954:	fb82 4203 	smull	r4, r2, r2, r3
 8000958:	1092      	asrs	r2, r2, #2
 800095a:	17db      	asrs	r3, r3, #31
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	461a      	mov	r2, r3
 8000960:	f000 f816 	bl	8000990 <display7SEGforMode>
				  auto_off();
 8000964:	f000 fd9e 	bl	80014a4 <auto_off>
				  setTimer4(500);
 8000968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096c:	f001 f94a 	bl	8001c04 <setTimer4>
				  convert_flag = 0;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <display+0x360>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	bd98      	pop	{r3, r4, r7, pc}
 800097a:	bf00      	nop
 800097c:	40010c00 	.word	0x40010c00
 8000980:	20000004 	.word	0x20000004
 8000984:	20000020 	.word	0x20000020
 8000988:	66666667 	.word	0x66666667
 800098c:	20000094 	.word	0x20000094

08000990 <display7SEGforMode>:
 *      Author: ADMIN
 */
#include "display7SEG.h"
#include "global.h"

void display7SEGforMode(int mode, int counter_horizontal, int counter_vertical){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3b15      	subs	r3, #21
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	f200 80cf 	bhi.w	8000b44 <display7SEGforMode+0x1b4>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <display7SEGforMode+0x1c>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	080009bd 	.word	0x080009bd
 80009b0:	08000a1f 	.word	0x08000a1f
 80009b4:	08000a81 	.word	0x08000a81
 80009b8:	08000ae3 	.word	0x08000ae3
	switch(mode){
	case MODE1:
		  HAL_GPIO_WritePin(MODE_LED7_0_GPIO_Port, MODE_LED7_0_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4878      	ldr	r0, [pc, #480]	; (8000ba4 <display7SEGforMode+0x214>)
 80009c4:	f001 fd59 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_1_GPIO_Port, MODE_LED7_1_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	4875      	ldr	r0, [pc, #468]	; (8000ba4 <display7SEGforMode+0x214>)
 80009d0:	f001 fd53 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_2_GPIO_Port, MODE_LED7_2_Pin, RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009da:	4872      	ldr	r0, [pc, #456]	; (8000ba4 <display7SEGforMode+0x214>)
 80009dc:	f001 fd4d 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_3_GPIO_Port, MODE_LED7_3_Pin, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e6:	486f      	ldr	r0, [pc, #444]	; (8000ba4 <display7SEGforMode+0x214>)
 80009e8:	f001 fd47 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_4_GPIO_Port, MODE_LED7_4_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	486c      	ldr	r0, [pc, #432]	; (8000ba4 <display7SEGforMode+0x214>)
 80009f4:	f001 fd41 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_5_GPIO_Port, MODE_LED7_5_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4869      	ldr	r0, [pc, #420]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a00:	f001 fd3b 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_6_GPIO_Port, MODE_LED7_6_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0a:	4866      	ldr	r0, [pc, #408]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a0c:	f001 fd35 	bl	800247a <HAL_GPIO_WritePin>
		  horizontal_7SEG(counter_horizontal);
 8000a10:	68b8      	ldr	r0, [r7, #8]
 8000a12:	f000 f8c9 	bl	8000ba8 <horizontal_7SEG>
		  vertical_7SEG(counter_vertical);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 fa78 	bl	8000f0c <vertical_7SEG>
		break;
 8000a1c:	e0bd      	b.n	8000b9a <display7SEGforMode+0x20a>
	case MODE2:
		  HAL_GPIO_WritePin(MODE_LED7_0_GPIO_Port, MODE_LED7_0_Pin, RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a24:	485f      	ldr	r0, [pc, #380]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a26:	f001 fd28 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_1_GPIO_Port, MODE_LED7_1_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a30:	485c      	ldr	r0, [pc, #368]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a32:	f001 fd22 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_2_GPIO_Port, MODE_LED7_2_Pin, SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3c:	4859      	ldr	r0, [pc, #356]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a3e:	f001 fd1c 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_3_GPIO_Port, MODE_LED7_3_Pin, RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a48:	4856      	ldr	r0, [pc, #344]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a4a:	f001 fd16 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_4_GPIO_Port, MODE_LED7_4_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a54:	4853      	ldr	r0, [pc, #332]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a56:	f001 fd10 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_5_GPIO_Port, MODE_LED7_5_Pin, SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	4850      	ldr	r0, [pc, #320]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a62:	f001 fd0a 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_6_GPIO_Port, MODE_LED7_6_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6c:	484d      	ldr	r0, [pc, #308]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a6e:	f001 fd04 	bl	800247a <HAL_GPIO_WritePin>
		  horizontal_7SEG(counter_horizontal);
 8000a72:	68b8      	ldr	r0, [r7, #8]
 8000a74:	f000 f898 	bl	8000ba8 <horizontal_7SEG>
		  vertical_7SEG(counter_vertical);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fa47 	bl	8000f0c <vertical_7SEG>
		break;
 8000a7e:	e08c      	b.n	8000b9a <display7SEGforMode+0x20a>
	case MODE3:
		  HAL_GPIO_WritePin(MODE_LED7_0_GPIO_Port, MODE_LED7_0_Pin, RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a86:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a88:	f001 fcf7 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_1_GPIO_Port, MODE_LED7_1_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a92:	4844      	ldr	r0, [pc, #272]	; (8000ba4 <display7SEGforMode+0x214>)
 8000a94:	f001 fcf1 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_2_GPIO_Port, MODE_LED7_2_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	4841      	ldr	r0, [pc, #260]	; (8000ba4 <display7SEGforMode+0x214>)
 8000aa0:	f001 fceb 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_3_GPIO_Port, MODE_LED7_3_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aaa:	483e      	ldr	r0, [pc, #248]	; (8000ba4 <display7SEGforMode+0x214>)
 8000aac:	f001 fce5 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_4_GPIO_Port, MODE_LED7_4_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	483b      	ldr	r0, [pc, #236]	; (8000ba4 <display7SEGforMode+0x214>)
 8000ab8:	f001 fcdf 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_5_GPIO_Port, MODE_LED7_5_Pin, SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	4838      	ldr	r0, [pc, #224]	; (8000ba4 <display7SEGforMode+0x214>)
 8000ac4:	f001 fcd9 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_6_GPIO_Port, MODE_LED7_6_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	4835      	ldr	r0, [pc, #212]	; (8000ba4 <display7SEGforMode+0x214>)
 8000ad0:	f001 fcd3 	bl	800247a <HAL_GPIO_WritePin>
		  horizontal_7SEG(counter_horizontal);
 8000ad4:	68b8      	ldr	r0, [r7, #8]
 8000ad6:	f000 f867 	bl	8000ba8 <horizontal_7SEG>
		  vertical_7SEG(counter_vertical);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 fa16 	bl	8000f0c <vertical_7SEG>
		break;
 8000ae0:	e05b      	b.n	8000b9a <display7SEGforMode+0x20a>
	case MODE4:
		  HAL_GPIO_WritePin(MODE_LED7_0_GPIO_Port, MODE_LED7_0_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae8:	482e      	ldr	r0, [pc, #184]	; (8000ba4 <display7SEGforMode+0x214>)
 8000aea:	f001 fcc6 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_1_GPIO_Port, MODE_LED7_1_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af4:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <display7SEGforMode+0x214>)
 8000af6:	f001 fcc0 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_2_GPIO_Port, MODE_LED7_2_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b02:	f001 fcba 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_3_GPIO_Port, MODE_LED7_3_Pin, SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0c:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b0e:	f001 fcb4 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_4_GPIO_Port, MODE_LED7_4_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b18:	4822      	ldr	r0, [pc, #136]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b1a:	f001 fcae 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_5_GPIO_Port, MODE_LED7_5_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b24:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b26:	f001 fca8 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_6_GPIO_Port, MODE_LED7_6_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b32:	f001 fca2 	bl	800247a <HAL_GPIO_WritePin>
		  horizontal_7SEG(counter_horizontal);
 8000b36:	68b8      	ldr	r0, [r7, #8]
 8000b38:	f000 f836 	bl	8000ba8 <horizontal_7SEG>
		  vertical_7SEG(counter_vertical);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f9e5 	bl	8000f0c <vertical_7SEG>
		break;
 8000b42:	e02a      	b.n	8000b9a <display7SEGforMode+0x20a>
	default:
		  HAL_GPIO_WritePin(MODE_LED7_0_GPIO_Port, MODE_LED7_0_Pin, SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b4c:	f001 fc95 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_1_GPIO_Port, MODE_LED7_1_Pin, SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b58:	f001 fc8f 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_2_GPIO_Port, MODE_LED7_2_Pin, SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b64:	f001 fc89 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_3_GPIO_Port, MODE_LED7_3_Pin, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b70:	f001 fc83 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_4_GPIO_Port, MODE_LED7_4_Pin, SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b7c:	f001 fc7d 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_5_GPIO_Port, MODE_LED7_5_Pin, SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b88:	f001 fc77 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MODE_LED7_6_GPIO_Port, MODE_LED7_6_Pin, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <display7SEGforMode+0x214>)
 8000b94:	f001 fc71 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000b98:	bf00      	nop
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010c00 	.word	0x40010c00

08000ba8 <horizontal_7SEG>:
void horizontal_7SEG(int index){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b09      	cmp	r3, #9
 8000bb4:	f200 8180 	bhi.w	8000eb8 <horizontal_7SEG+0x310>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <horizontal_7SEG+0x18>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000be9 	.word	0x08000be9
 8000bc4:	08000c31 	.word	0x08000c31
 8000bc8:	08000c79 	.word	0x08000c79
 8000bcc:	08000cc1 	.word	0x08000cc1
 8000bd0:	08000d09 	.word	0x08000d09
 8000bd4:	08000d51 	.word	0x08000d51
 8000bd8:	08000d99 	.word	0x08000d99
 8000bdc:	08000de1 	.word	0x08000de1
 8000be0:	08000e29 	.word	0x08000e29
 8000be4:	08000e71 	.word	0x08000e71
	switch(index){
	case 0:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	48c6      	ldr	r0, [pc, #792]	; (8000f08 <horizontal_7SEG+0x360>)
 8000bee:	f001 fc44 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	48c4      	ldr	r0, [pc, #784]	; (8000f08 <horizontal_7SEG+0x360>)
 8000bf8:	f001 fc3f 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2104      	movs	r1, #4
 8000c00:	48c1      	ldr	r0, [pc, #772]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c02:	f001 fc3a 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2108      	movs	r1, #8
 8000c0a:	48bf      	ldr	r0, [pc, #764]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c0c:	f001 fc35 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2110      	movs	r1, #16
 8000c14:	48bc      	ldr	r0, [pc, #752]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c16:	f001 fc30 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	48ba      	ldr	r0, [pc, #744]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c20:	f001 fc2b 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	48b7      	ldr	r0, [pc, #732]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c2a:	f001 fc26 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000c2e:	e167      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 1:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	48b4      	ldr	r0, [pc, #720]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c36:	f001 fc20 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	48b2      	ldr	r0, [pc, #712]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c40:	f001 fc1b 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2104      	movs	r1, #4
 8000c48:	48af      	ldr	r0, [pc, #700]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c4a:	f001 fc16 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	48ad      	ldr	r0, [pc, #692]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c54:	f001 fc11 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	48aa      	ldr	r0, [pc, #680]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c5e:	f001 fc0c 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2120      	movs	r1, #32
 8000c66:	48a8      	ldr	r0, [pc, #672]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c68:	f001 fc07 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	48a5      	ldr	r0, [pc, #660]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c72:	f001 fc02 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000c76:	e143      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 2:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	48a2      	ldr	r0, [pc, #648]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c7e:	f001 fbfc 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2102      	movs	r1, #2
 8000c86:	48a0      	ldr	r0, [pc, #640]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c88:	f001 fbf7 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2104      	movs	r1, #4
 8000c90:	489d      	ldr	r0, [pc, #628]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c92:	f001 fbf2 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2108      	movs	r1, #8
 8000c9a:	489b      	ldr	r0, [pc, #620]	; (8000f08 <horizontal_7SEG+0x360>)
 8000c9c:	f001 fbed 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4898      	ldr	r0, [pc, #608]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ca6:	f001 fbe8 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	4896      	ldr	r0, [pc, #600]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cb0:	f001 fbe3 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	4893      	ldr	r0, [pc, #588]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cba:	f001 fbde 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000cbe:	e11f      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 3:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4890      	ldr	r0, [pc, #576]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cc6:	f001 fbd8 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2102      	movs	r1, #2
 8000cce:	488e      	ldr	r0, [pc, #568]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cd0:	f001 fbd3 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	488b      	ldr	r0, [pc, #556]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cda:	f001 fbce 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	4889      	ldr	r0, [pc, #548]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ce4:	f001 fbc9 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	4886      	ldr	r0, [pc, #536]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cee:	f001 fbc4 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4884      	ldr	r0, [pc, #528]	; (8000f08 <horizontal_7SEG+0x360>)
 8000cf8:	f001 fbbf 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4881      	ldr	r0, [pc, #516]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d02:	f001 fbba 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000d06:	e0fb      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 4:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	487e      	ldr	r0, [pc, #504]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d0e:	f001 fbb4 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2102      	movs	r1, #2
 8000d16:	487c      	ldr	r0, [pc, #496]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d18:	f001 fbaf 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4879      	ldr	r0, [pc, #484]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d22:	f001 fbaa 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4877      	ldr	r0, [pc, #476]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d2c:	f001 fba5 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2110      	movs	r1, #16
 8000d34:	4874      	ldr	r0, [pc, #464]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d36:	f001 fba0 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4872      	ldr	r0, [pc, #456]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d40:	f001 fb9b 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	486f      	ldr	r0, [pc, #444]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d4a:	f001 fb96 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000d4e:	e0d7      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 5:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	486c      	ldr	r0, [pc, #432]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d56:	f001 fb90 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	486a      	ldr	r0, [pc, #424]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d60:	f001 fb8b 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2104      	movs	r1, #4
 8000d68:	4867      	ldr	r0, [pc, #412]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d6a:	f001 fb86 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2108      	movs	r1, #8
 8000d72:	4865      	ldr	r0, [pc, #404]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d74:	f001 fb81 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4862      	ldr	r0, [pc, #392]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d7e:	f001 fb7c 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2120      	movs	r1, #32
 8000d86:	4860      	ldr	r0, [pc, #384]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d88:	f001 fb77 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	485d      	ldr	r0, [pc, #372]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d92:	f001 fb72 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000d96:	e0b3      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 6:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	485a      	ldr	r0, [pc, #360]	; (8000f08 <horizontal_7SEG+0x360>)
 8000d9e:	f001 fb6c 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2102      	movs	r1, #2
 8000da6:	4858      	ldr	r0, [pc, #352]	; (8000f08 <horizontal_7SEG+0x360>)
 8000da8:	f001 fb67 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2104      	movs	r1, #4
 8000db0:	4855      	ldr	r0, [pc, #340]	; (8000f08 <horizontal_7SEG+0x360>)
 8000db2:	f001 fb62 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2108      	movs	r1, #8
 8000dba:	4853      	ldr	r0, [pc, #332]	; (8000f08 <horizontal_7SEG+0x360>)
 8000dbc:	f001 fb5d 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4850      	ldr	r0, [pc, #320]	; (8000f08 <horizontal_7SEG+0x360>)
 8000dc6:	f001 fb58 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2120      	movs	r1, #32
 8000dce:	484e      	ldr	r0, [pc, #312]	; (8000f08 <horizontal_7SEG+0x360>)
 8000dd0:	f001 fb53 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	484b      	ldr	r0, [pc, #300]	; (8000f08 <horizontal_7SEG+0x360>)
 8000dda:	f001 fb4e 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000dde:	e08f      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 7:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2101      	movs	r1, #1
 8000de4:	4848      	ldr	r0, [pc, #288]	; (8000f08 <horizontal_7SEG+0x360>)
 8000de6:	f001 fb48 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2102      	movs	r1, #2
 8000dee:	4846      	ldr	r0, [pc, #280]	; (8000f08 <horizontal_7SEG+0x360>)
 8000df0:	f001 fb43 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	4843      	ldr	r0, [pc, #268]	; (8000f08 <horizontal_7SEG+0x360>)
 8000dfa:	f001 fb3e 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2108      	movs	r1, #8
 8000e02:	4841      	ldr	r0, [pc, #260]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e04:	f001 fb39 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e0e:	f001 fb34 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2120      	movs	r1, #32
 8000e16:	483c      	ldr	r0, [pc, #240]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e18:	f001 fb2f 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4839      	ldr	r0, [pc, #228]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e22:	f001 fb2a 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000e26:	e06b      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 8:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4836      	ldr	r0, [pc, #216]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e2e:	f001 fb24 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	4834      	ldr	r0, [pc, #208]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e38:	f001 fb1f 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2104      	movs	r1, #4
 8000e40:	4831      	ldr	r0, [pc, #196]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e42:	f001 fb1a 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2108      	movs	r1, #8
 8000e4a:	482f      	ldr	r0, [pc, #188]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e4c:	f001 fb15 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	482c      	ldr	r0, [pc, #176]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e56:	f001 fb10 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	482a      	ldr	r0, [pc, #168]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e60:	f001 fb0b 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2140      	movs	r1, #64	; 0x40
 8000e68:	4827      	ldr	r0, [pc, #156]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e6a:	f001 fb06 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000e6e:	e047      	b.n	8000f00 <horizontal_7SEG+0x358>
	case 9:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2101      	movs	r1, #1
 8000e74:	4824      	ldr	r0, [pc, #144]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e76:	f001 fb00 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e80:	f001 fafb 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2104      	movs	r1, #4
 8000e88:	481f      	ldr	r0, [pc, #124]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e8a:	f001 faf6 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2108      	movs	r1, #8
 8000e92:	481d      	ldr	r0, [pc, #116]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e94:	f001 faf1 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <horizontal_7SEG+0x360>)
 8000e9e:	f001 faec 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4818      	ldr	r0, [pc, #96]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ea8:	f001 fae7 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4815      	ldr	r0, [pc, #84]	; (8000f08 <horizontal_7SEG+0x360>)
 8000eb2:	f001 fae2 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000eb6:	e023      	b.n	8000f00 <horizontal_7SEG+0x358>
	default:
		  HAL_GPIO_WritePin(LED7h_0_GPIO_Port, LED7h_0_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4812      	ldr	r0, [pc, #72]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ebe:	f001 fadc 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_1_GPIO_Port, LED7h_1_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ec8:	f001 fad7 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_2_GPIO_Port, LED7h_2_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2104      	movs	r1, #4
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ed2:	f001 fad2 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_3_GPIO_Port, LED7h_3_Pin, SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2108      	movs	r1, #8
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <horizontal_7SEG+0x360>)
 8000edc:	f001 facd 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_4_GPIO_Port, LED7h_4_Pin, SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ee6:	f001 fac8 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_5_GPIO_Port, LED7h_5_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2120      	movs	r1, #32
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <horizontal_7SEG+0x360>)
 8000ef0:	f001 fac3 	bl	800247a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED7h_6_GPIO_Port, LED7h_6_Pin, SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <horizontal_7SEG+0x360>)
 8000efa:	f001 fabe 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8000efe:	bf00      	nop
	}
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <vertical_7SEG>:

void vertical_7SEG(int index){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b09      	cmp	r3, #9
 8000f18:	f200 8180 	bhi.w	800121c <vertical_7SEG+0x310>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <vertical_7SEG+0x18>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f4d 	.word	0x08000f4d
 8000f28:	08000f95 	.word	0x08000f95
 8000f2c:	08000fdd 	.word	0x08000fdd
 8000f30:	08001025 	.word	0x08001025
 8000f34:	0800106d 	.word	0x0800106d
 8000f38:	080010b5 	.word	0x080010b5
 8000f3c:	080010fd 	.word	0x080010fd
 8000f40:	08001145 	.word	0x08001145
 8000f44:	0800118d 	.word	0x0800118d
 8000f48:	080011d5 	.word	0x080011d5
	switch(index){
		case 0:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2101      	movs	r1, #1
 8000f50:	48c6      	ldr	r0, [pc, #792]	; (800126c <vertical_7SEG+0x360>)
 8000f52:	f001 fa92 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	48c4      	ldr	r0, [pc, #784]	; (800126c <vertical_7SEG+0x360>)
 8000f5c:	f001 fa8d 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2104      	movs	r1, #4
 8000f64:	48c1      	ldr	r0, [pc, #772]	; (800126c <vertical_7SEG+0x360>)
 8000f66:	f001 fa88 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	48bf      	ldr	r0, [pc, #764]	; (800126c <vertical_7SEG+0x360>)
 8000f70:	f001 fa83 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2110      	movs	r1, #16
 8000f78:	48bc      	ldr	r0, [pc, #752]	; (800126c <vertical_7SEG+0x360>)
 8000f7a:	f001 fa7e 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	48ba      	ldr	r0, [pc, #744]	; (800126c <vertical_7SEG+0x360>)
 8000f84:	f001 fa79 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	48b7      	ldr	r0, [pc, #732]	; (800126c <vertical_7SEG+0x360>)
 8000f8e:	f001 fa74 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8000f92:	e167      	b.n	8001264 <vertical_7SEG+0x358>
		case 1:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	48b4      	ldr	r0, [pc, #720]	; (800126c <vertical_7SEG+0x360>)
 8000f9a:	f001 fa6e 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	48b2      	ldr	r0, [pc, #712]	; (800126c <vertical_7SEG+0x360>)
 8000fa4:	f001 fa69 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	48af      	ldr	r0, [pc, #700]	; (800126c <vertical_7SEG+0x360>)
 8000fae:	f001 fa64 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	48ad      	ldr	r0, [pc, #692]	; (800126c <vertical_7SEG+0x360>)
 8000fb8:	f001 fa5f 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	48aa      	ldr	r0, [pc, #680]	; (800126c <vertical_7SEG+0x360>)
 8000fc2:	f001 fa5a 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2120      	movs	r1, #32
 8000fca:	48a8      	ldr	r0, [pc, #672]	; (800126c <vertical_7SEG+0x360>)
 8000fcc:	f001 fa55 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	48a5      	ldr	r0, [pc, #660]	; (800126c <vertical_7SEG+0x360>)
 8000fd6:	f001 fa50 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8000fda:	e143      	b.n	8001264 <vertical_7SEG+0x358>
		case 2:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	48a2      	ldr	r0, [pc, #648]	; (800126c <vertical_7SEG+0x360>)
 8000fe2:	f001 fa4a 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	48a0      	ldr	r0, [pc, #640]	; (800126c <vertical_7SEG+0x360>)
 8000fec:	f001 fa45 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	489d      	ldr	r0, [pc, #628]	; (800126c <vertical_7SEG+0x360>)
 8000ff6:	f001 fa40 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	489b      	ldr	r0, [pc, #620]	; (800126c <vertical_7SEG+0x360>)
 8001000:	f001 fa3b 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4898      	ldr	r0, [pc, #608]	; (800126c <vertical_7SEG+0x360>)
 800100a:	f001 fa36 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2120      	movs	r1, #32
 8001012:	4896      	ldr	r0, [pc, #600]	; (800126c <vertical_7SEG+0x360>)
 8001014:	f001 fa31 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	4893      	ldr	r0, [pc, #588]	; (800126c <vertical_7SEG+0x360>)
 800101e:	f001 fa2c 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001022:	e11f      	b.n	8001264 <vertical_7SEG+0x358>
		case 3:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2101      	movs	r1, #1
 8001028:	4890      	ldr	r0, [pc, #576]	; (800126c <vertical_7SEG+0x360>)
 800102a:	f001 fa26 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2102      	movs	r1, #2
 8001032:	488e      	ldr	r0, [pc, #568]	; (800126c <vertical_7SEG+0x360>)
 8001034:	f001 fa21 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2104      	movs	r1, #4
 800103c:	488b      	ldr	r0, [pc, #556]	; (800126c <vertical_7SEG+0x360>)
 800103e:	f001 fa1c 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	4889      	ldr	r0, [pc, #548]	; (800126c <vertical_7SEG+0x360>)
 8001048:	f001 fa17 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2110      	movs	r1, #16
 8001050:	4886      	ldr	r0, [pc, #536]	; (800126c <vertical_7SEG+0x360>)
 8001052:	f001 fa12 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	4884      	ldr	r0, [pc, #528]	; (800126c <vertical_7SEG+0x360>)
 800105c:	f001 fa0d 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2140      	movs	r1, #64	; 0x40
 8001064:	4881      	ldr	r0, [pc, #516]	; (800126c <vertical_7SEG+0x360>)
 8001066:	f001 fa08 	bl	800247a <HAL_GPIO_WritePin>
			break;
 800106a:	e0fb      	b.n	8001264 <vertical_7SEG+0x358>
		case 4:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2101      	movs	r1, #1
 8001070:	487e      	ldr	r0, [pc, #504]	; (800126c <vertical_7SEG+0x360>)
 8001072:	f001 fa02 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2102      	movs	r1, #2
 800107a:	487c      	ldr	r0, [pc, #496]	; (800126c <vertical_7SEG+0x360>)
 800107c:	f001 f9fd 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2104      	movs	r1, #4
 8001084:	4879      	ldr	r0, [pc, #484]	; (800126c <vertical_7SEG+0x360>)
 8001086:	f001 f9f8 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2108      	movs	r1, #8
 800108e:	4877      	ldr	r0, [pc, #476]	; (800126c <vertical_7SEG+0x360>)
 8001090:	f001 f9f3 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	4874      	ldr	r0, [pc, #464]	; (800126c <vertical_7SEG+0x360>)
 800109a:	f001 f9ee 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2120      	movs	r1, #32
 80010a2:	4872      	ldr	r0, [pc, #456]	; (800126c <vertical_7SEG+0x360>)
 80010a4:	f001 f9e9 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	486f      	ldr	r0, [pc, #444]	; (800126c <vertical_7SEG+0x360>)
 80010ae:	f001 f9e4 	bl	800247a <HAL_GPIO_WritePin>
			break;
 80010b2:	e0d7      	b.n	8001264 <vertical_7SEG+0x358>
		case 5:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	486c      	ldr	r0, [pc, #432]	; (800126c <vertical_7SEG+0x360>)
 80010ba:	f001 f9de 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2102      	movs	r1, #2
 80010c2:	486a      	ldr	r0, [pc, #424]	; (800126c <vertical_7SEG+0x360>)
 80010c4:	f001 f9d9 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2104      	movs	r1, #4
 80010cc:	4867      	ldr	r0, [pc, #412]	; (800126c <vertical_7SEG+0x360>)
 80010ce:	f001 f9d4 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	4865      	ldr	r0, [pc, #404]	; (800126c <vertical_7SEG+0x360>)
 80010d8:	f001 f9cf 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2110      	movs	r1, #16
 80010e0:	4862      	ldr	r0, [pc, #392]	; (800126c <vertical_7SEG+0x360>)
 80010e2:	f001 f9ca 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	4860      	ldr	r0, [pc, #384]	; (800126c <vertical_7SEG+0x360>)
 80010ec:	f001 f9c5 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	485d      	ldr	r0, [pc, #372]	; (800126c <vertical_7SEG+0x360>)
 80010f6:	f001 f9c0 	bl	800247a <HAL_GPIO_WritePin>
			break;
 80010fa:	e0b3      	b.n	8001264 <vertical_7SEG+0x358>
		case 6:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	485a      	ldr	r0, [pc, #360]	; (800126c <vertical_7SEG+0x360>)
 8001102:	f001 f9ba 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2102      	movs	r1, #2
 800110a:	4858      	ldr	r0, [pc, #352]	; (800126c <vertical_7SEG+0x360>)
 800110c:	f001 f9b5 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2104      	movs	r1, #4
 8001114:	4855      	ldr	r0, [pc, #340]	; (800126c <vertical_7SEG+0x360>)
 8001116:	f001 f9b0 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4853      	ldr	r0, [pc, #332]	; (800126c <vertical_7SEG+0x360>)
 8001120:	f001 f9ab 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2110      	movs	r1, #16
 8001128:	4850      	ldr	r0, [pc, #320]	; (800126c <vertical_7SEG+0x360>)
 800112a:	f001 f9a6 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	484e      	ldr	r0, [pc, #312]	; (800126c <vertical_7SEG+0x360>)
 8001134:	f001 f9a1 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	484b      	ldr	r0, [pc, #300]	; (800126c <vertical_7SEG+0x360>)
 800113e:	f001 f99c 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001142:	e08f      	b.n	8001264 <vertical_7SEG+0x358>
		case 7:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2101      	movs	r1, #1
 8001148:	4848      	ldr	r0, [pc, #288]	; (800126c <vertical_7SEG+0x360>)
 800114a:	f001 f996 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2102      	movs	r1, #2
 8001152:	4846      	ldr	r0, [pc, #280]	; (800126c <vertical_7SEG+0x360>)
 8001154:	f001 f991 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4843      	ldr	r0, [pc, #268]	; (800126c <vertical_7SEG+0x360>)
 800115e:	f001 f98c 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2108      	movs	r1, #8
 8001166:	4841      	ldr	r0, [pc, #260]	; (800126c <vertical_7SEG+0x360>)
 8001168:	f001 f987 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2110      	movs	r1, #16
 8001170:	483e      	ldr	r0, [pc, #248]	; (800126c <vertical_7SEG+0x360>)
 8001172:	f001 f982 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2120      	movs	r1, #32
 800117a:	483c      	ldr	r0, [pc, #240]	; (800126c <vertical_7SEG+0x360>)
 800117c:	f001 f97d 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4839      	ldr	r0, [pc, #228]	; (800126c <vertical_7SEG+0x360>)
 8001186:	f001 f978 	bl	800247a <HAL_GPIO_WritePin>
			break;
 800118a:	e06b      	b.n	8001264 <vertical_7SEG+0x358>
		case 8:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2101      	movs	r1, #1
 8001190:	4836      	ldr	r0, [pc, #216]	; (800126c <vertical_7SEG+0x360>)
 8001192:	f001 f972 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2102      	movs	r1, #2
 800119a:	4834      	ldr	r0, [pc, #208]	; (800126c <vertical_7SEG+0x360>)
 800119c:	f001 f96d 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2104      	movs	r1, #4
 80011a4:	4831      	ldr	r0, [pc, #196]	; (800126c <vertical_7SEG+0x360>)
 80011a6:	f001 f968 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2108      	movs	r1, #8
 80011ae:	482f      	ldr	r0, [pc, #188]	; (800126c <vertical_7SEG+0x360>)
 80011b0:	f001 f963 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2110      	movs	r1, #16
 80011b8:	482c      	ldr	r0, [pc, #176]	; (800126c <vertical_7SEG+0x360>)
 80011ba:	f001 f95e 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	482a      	ldr	r0, [pc, #168]	; (800126c <vertical_7SEG+0x360>)
 80011c4:	f001 f959 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	4827      	ldr	r0, [pc, #156]	; (800126c <vertical_7SEG+0x360>)
 80011ce:	f001 f954 	bl	800247a <HAL_GPIO_WritePin>
			break;
 80011d2:	e047      	b.n	8001264 <vertical_7SEG+0x358>
		case 9:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2101      	movs	r1, #1
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <vertical_7SEG+0x360>)
 80011da:	f001 f94e 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2102      	movs	r1, #2
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <vertical_7SEG+0x360>)
 80011e4:	f001 f949 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2104      	movs	r1, #4
 80011ec:	481f      	ldr	r0, [pc, #124]	; (800126c <vertical_7SEG+0x360>)
 80011ee:	f001 f944 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2108      	movs	r1, #8
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <vertical_7SEG+0x360>)
 80011f8:	f001 f93f 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	481a      	ldr	r0, [pc, #104]	; (800126c <vertical_7SEG+0x360>)
 8001202:	f001 f93a 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2120      	movs	r1, #32
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <vertical_7SEG+0x360>)
 800120c:	f001 f935 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	4815      	ldr	r0, [pc, #84]	; (800126c <vertical_7SEG+0x360>)
 8001216:	f001 f930 	bl	800247a <HAL_GPIO_WritePin>
			break;
 800121a:	e023      	b.n	8001264 <vertical_7SEG+0x358>
		default:
			  HAL_GPIO_WritePin(LED7v_0_GPIO_Port, LED7v_0_Pin, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2101      	movs	r1, #1
 8001220:	4812      	ldr	r0, [pc, #72]	; (800126c <vertical_7SEG+0x360>)
 8001222:	f001 f92a 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_1_GPIO_Port, LED7v_1_Pin, SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2102      	movs	r1, #2
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <vertical_7SEG+0x360>)
 800122c:	f001 f925 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_2_GPIO_Port, LED7v_2_Pin, SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2104      	movs	r1, #4
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <vertical_7SEG+0x360>)
 8001236:	f001 f920 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_3_GPIO_Port, LED7v_3_Pin, SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2108      	movs	r1, #8
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <vertical_7SEG+0x360>)
 8001240:	f001 f91b 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_4_GPIO_Port, LED7v_4_Pin, SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2110      	movs	r1, #16
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <vertical_7SEG+0x360>)
 800124a:	f001 f916 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_5_GPIO_Port, LED7v_5_Pin, SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2120      	movs	r1, #32
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <vertical_7SEG+0x360>)
 8001254:	f001 f911 	bl	800247a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED7v_6_GPIO_Port, LED7v_6_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2140      	movs	r1, #64	; 0x40
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <vertical_7SEG+0x360>)
 800125e:	f001 f90c 	bl	800247a <HAL_GPIO_WritePin>
			break;
 8001262:	bf00      	nop
		}
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010800 	.word	0x40010800

08001270 <led_horizontal>:

#include "global.h"
#include "displayLed.h"


void led_horizontal(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	switch(status_horizontal){
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <led_horizontal+0x94>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d02c      	beq.n	80012d6 <led_horizontal+0x66>
 800127c:	2b02      	cmp	r3, #2
 800127e:	dc3d      	bgt.n	80012fc <led_horizontal+0x8c>
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <led_horizontal+0x1a>
 8001284:	2b01      	cmp	r3, #1
 8001286:	d013      	beq.n	80012b0 <led_horizontal+0x40>
		HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8001288:	e038      	b.n	80012fc <led_horizontal+0x8c>
		HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001290:	481d      	ldr	r0, [pc, #116]	; (8001308 <led_horizontal+0x98>)
 8001292:	f001 f8f2 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <led_horizontal+0x98>)
 800129e:	f001 f8ec 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <led_horizontal+0x98>)
 80012aa:	f001 f8e6 	bl	800247a <HAL_GPIO_WritePin>
		break;
 80012ae:	e026      	b.n	80012fe <led_horizontal+0x8e>
		HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <led_horizontal+0x98>)
 80012b8:	f001 f8df 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <led_horizontal+0x98>)
 80012c4:	f001 f8d9 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <led_horizontal+0x98>)
 80012d0:	f001 f8d3 	bl	800247a <HAL_GPIO_WritePin>
		break;
 80012d4:	e013      	b.n	80012fe <led_horizontal+0x8e>
		HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <led_horizontal+0x98>)
 80012de:	f001 f8cc 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <led_horizontal+0x98>)
 80012ea:	f001 f8c6 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <led_horizontal+0x98>)
 80012f6:	f001 f8c0 	bl	800247a <HAL_GPIO_WritePin>
		break;
 80012fa:	e000      	b.n	80012fe <led_horizontal+0x8e>
		break;
 80012fc:	bf00      	nop
	}
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000090 	.word	0x20000090
 8001308:	40010800 	.word	0x40010800

0800130c <led_vertical>:

void led_vertical(){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	switch(status_vertical){
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <led_vertical+0x94>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d02c      	beq.n	8001372 <led_vertical+0x66>
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc3d      	bgt.n	8001398 <led_vertical+0x8c>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <led_vertical+0x1a>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d013      	beq.n	800134c <led_vertical+0x40>
		HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8001324:	e038      	b.n	8001398 <led_vertical+0x8c>
		HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	481d      	ldr	r0, [pc, #116]	; (80013a4 <led_vertical+0x98>)
 800132e:	f001 f8a4 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <led_vertical+0x98>)
 800133a:	f001 f89e 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <led_vertical+0x98>)
 8001346:	f001 f898 	bl	800247a <HAL_GPIO_WritePin>
		break;
 800134a:	e026      	b.n	800139a <led_vertical+0x8e>
		HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <led_vertical+0x98>)
 8001354:	f001 f891 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135e:	4811      	ldr	r0, [pc, #68]	; (80013a4 <led_vertical+0x98>)
 8001360:	f001 f88b 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <led_vertical+0x98>)
 800136c:	f001 f885 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8001370:	e013      	b.n	800139a <led_vertical+0x8e>
		HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <led_vertical+0x98>)
 800137a:	f001 f87e 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <led_vertical+0x98>)
 8001386:	f001 f878 	bl	800247a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <led_vertical+0x98>)
 8001392:	f001 f872 	bl	800247a <HAL_GPIO_WritePin>
		break;
 8001396:	e000      	b.n	800139a <led_vertical+0x8e>
		break;
 8001398:	bf00      	nop
	}
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000
 80013a4:	40010800 	.word	0x40010800

080013a8 <auto_red>:

void auto_red(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <auto_red+0x50>)
 80013b4:	f001 f861 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <auto_red+0x50>)
 80013c0:	f001 f85b 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	480b      	ldr	r0, [pc, #44]	; (80013f8 <auto_red+0x50>)
 80013cc:	f001 f855 	bl	800247a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <auto_red+0x50>)
 80013d8:	f001 f84f 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <auto_red+0x50>)
 80013e4:	f001 f849 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <auto_red+0x50>)
 80013f0:	f001 f843 	bl	800247a <HAL_GPIO_WritePin>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40010800 	.word	0x40010800

080013fc <auto_yellow>:

void auto_yellow(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	4811      	ldr	r0, [pc, #68]	; (800144c <auto_yellow+0x50>)
 8001408:	f001 f837 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <auto_yellow+0x50>)
 8001414:	f001 f831 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <auto_yellow+0x50>)
 8001420:	f001 f82b 	bl	800247a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <auto_yellow+0x50>)
 800142c:	f001 f825 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <auto_yellow+0x50>)
 8001438:	f001 f81f 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001442:	4802      	ldr	r0, [pc, #8]	; (800144c <auto_yellow+0x50>)
 8001444:	f001 f819 	bl	800247a <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010800 	.word	0x40010800

08001450 <auto_green>:

void auto_green(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <auto_green+0x50>)
 800145c:	f001 f80d 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <auto_green+0x50>)
 8001468:	f001 f807 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <auto_green+0x50>)
 8001474:	f001 f801 	bl	800247a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <auto_green+0x50>)
 8001480:	f000 fffb 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <auto_green+0x50>)
 800148c:	f000 fff5 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <auto_green+0x50>)
 8001498:	f000 ffef 	bl	800247a <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010800 	.word	0x40010800

080014a4 <auto_off>:

void auto_off(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red_horizontal_GPIO_Port, red_horizontal_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <auto_off+0x50>)
 80014b0:	f000 ffe3 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_horizontal_GPIO_Port, yellow_horizontal_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <auto_off+0x50>)
 80014bc:	f000 ffdd 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_horizontal_GPIO_Port, green_horizontal_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	480b      	ldr	r0, [pc, #44]	; (80014f4 <auto_off+0x50>)
 80014c8:	f000 ffd7 	bl	800247a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red_vertical_GPIO_Port, red_vertical_Pin, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <auto_off+0x50>)
 80014d4:	f000 ffd1 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow_vertical_GPIO_Port, yellow_vertical_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <auto_off+0x50>)
 80014e0:	f000 ffcb 	bl	800247a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_vertical_GPIO_Port, green_vertical_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ea:	4802      	ldr	r0, [pc, #8]	; (80014f4 <auto_off+0x50>)
 80014ec:	f000 ffc5 	bl	800247a <HAL_GPIO_WritePin>
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010800 	.word	0x40010800

080014f8 <fsm_mode_run>:
 *      Author: ADMIN
 */
#include <fsm_automatic.h>
#include "software_timer.h"

void fsm_mode_run(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	switch(status_mode){
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <fsm_mode_run+0xb4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b15      	subs	r3, #21
 8001502:	2b03      	cmp	r3, #3
 8001504:	d846      	bhi.n	8001594 <fsm_mode_run+0x9c>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <fsm_mode_run+0x14>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800151d 	.word	0x0800151d
 8001510:	0800153b 	.word	0x0800153b
 8001514:	08001559 	.word	0x08001559
 8001518:	08001577 	.word	0x08001577
	case MODE1:

		if(isbutton1pressed() == 1){
 800151c:	f000 f88e 	bl	800163c <isbutton1pressed>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d138      	bne.n	8001598 <fsm_mode_run+0xa0>
			status_mode = MODE2;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <fsm_mode_run+0xb4>)
 8001528:	2216      	movs	r2, #22
 800152a:	601a      	str	r2, [r3, #0]
			convert_flag = 0;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <fsm_mode_run+0xb8>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
			timer2_flag = 1;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <fsm_mode_run+0xbc>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
		}
		break;
 8001538:	e02e      	b.n	8001598 <fsm_mode_run+0xa0>
	case MODE2:
		if(isbutton1pressed() == 1){
 800153a:	f000 f87f 	bl	800163c <isbutton1pressed>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d12b      	bne.n	800159c <fsm_mode_run+0xa4>
			status_mode = MODE3;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <fsm_mode_run+0xb4>)
 8001546:	2217      	movs	r2, #23
 8001548:	601a      	str	r2, [r3, #0]
			convert_flag = 0;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <fsm_mode_run+0xb8>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
			timer3_flag = 1;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <fsm_mode_run+0xc0>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
		}
		break;
 8001556:	e021      	b.n	800159c <fsm_mode_run+0xa4>
	case MODE3:
		if(isbutton1pressed() == 1){
 8001558:	f000 f870 	bl	800163c <isbutton1pressed>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d11e      	bne.n	80015a0 <fsm_mode_run+0xa8>
			status_mode = MODE4;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <fsm_mode_run+0xb4>)
 8001564:	2218      	movs	r2, #24
 8001566:	601a      	str	r2, [r3, #0]
			convert_flag = 0;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <fsm_mode_run+0xb8>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
			timer4_flag = 1;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <fsm_mode_run+0xc4>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]
		}
		break;
 8001574:	e014      	b.n	80015a0 <fsm_mode_run+0xa8>
	case MODE4:
		if(isbutton1pressed() == 1){
 8001576:	f000 f861 	bl	800163c <isbutton1pressed>
 800157a:	4603      	mov	r3, r0
 800157c:	2b01      	cmp	r3, #1
 800157e:	d111      	bne.n	80015a4 <fsm_mode_run+0xac>
			status_mode = MODE1;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <fsm_mode_run+0xb4>)
 8001582:	2215      	movs	r2, #21
 8001584:	601a      	str	r2, [r3, #0]
			convert_flag = 0;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <fsm_mode_run+0xb8>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
			timer1_flag = 1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <fsm_mode_run+0xc8>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
		}
		break;
 8001592:	e007      	b.n	80015a4 <fsm_mode_run+0xac>
	default:
		break;
 8001594:	bf00      	nop
 8001596:	e006      	b.n	80015a6 <fsm_mode_run+0xae>
		break;
 8001598:	bf00      	nop
 800159a:	e004      	b.n	80015a6 <fsm_mode_run+0xae>
		break;
 800159c:	bf00      	nop
 800159e:	e002      	b.n	80015a6 <fsm_mode_run+0xae>
		break;
 80015a0:	bf00      	nop
 80015a2:	e000      	b.n	80015a6 <fsm_mode_run+0xae>
		break;
 80015a4:	bf00      	nop
	}
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000094 	.word	0x20000094
 80015b4:	200000b8 	.word	0x200000b8
 80015b8:	200000c0 	.word	0x200000c0
 80015bc:	200000c8 	.word	0x200000c8
 80015c0:	200000b0 	.word	0x200000b0

080015c4 <fsm_button_run>:

void fsm_button_run(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if(isbutton2pressed() == 1){
 80015c8:	f000 f84a 	bl	8001660 <isbutton2pressed>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d118      	bne.n	8001604 <fsm_button_run+0x40>
		if(status_mode == MODE2){
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <fsm_button_run+0x60>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b16      	cmp	r3, #22
 80015d8:	d105      	bne.n	80015e6 <fsm_button_run+0x22>
				MAX_RED++;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <fsm_button_run+0x64>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <fsm_button_run+0x64>)
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e00e      	b.n	8001604 <fsm_button_run+0x40>
		} else if (status_mode == MODE3){
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <fsm_button_run+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b17      	cmp	r3, #23
 80015ec:	d105      	bne.n	80015fa <fsm_button_run+0x36>
				MAX_YELLOW++;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <fsm_button_run+0x68>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <fsm_button_run+0x68>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e004      	b.n	8001604 <fsm_button_run+0x40>
		} else {
				MAX_GREEN++;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <fsm_button_run+0x6c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <fsm_button_run+0x6c>)
 8001602:	6013      	str	r3, [r2, #0]
		}
	}
	if(isbutton3pressed() == 1){
 8001604:	f000 f83e 	bl	8001684 <isbutton3pressed>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <fsm_button_run+0x5c>
		status_mode = MODE1;
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <fsm_button_run+0x60>)
 8001610:	2215      	movs	r2, #21
 8001612:	601a      	str	r2, [r3, #0]
		convert_flag = 0;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <fsm_button_run+0x70>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
		timer1_flag = 1;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <fsm_button_run+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
	}
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000004 	.word	0x20000004
 8001628:	20000018 	.word	0x20000018
 800162c:	2000001c 	.word	0x2000001c
 8001630:	20000020 	.word	0x20000020
 8001634:	20000094 	.word	0x20000094
 8001638:	200000b0 	.word	0x200000b0

0800163c <isbutton1pressed>:
int KeyRegbutton3_2 = NORMAL_STATE;
int KeyRegbutton3_3 = NORMAL_STATE;

//Button is press?

int isbutton1pressed(){
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <isbutton1pressed+0x20>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d104      	bne.n	8001652 <isbutton1pressed+0x16>
		button1_flag = 0;
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <isbutton1pressed+0x20>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
		return 1;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <isbutton1pressed+0x18>
	}
	return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200000a0 	.word	0x200000a0

08001660 <isbutton2pressed>:
int isbutton2pressed(){
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <isbutton2pressed+0x20>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d104      	bne.n	8001676 <isbutton2pressed+0x16>
		button2_flag = 0;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <isbutton2pressed+0x20>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
		return 1;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <isbutton2pressed+0x18>
	}
	return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	200000a4 	.word	0x200000a4

08001684 <isbutton3pressed>:
int isbutton3pressed(){
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <isbutton3pressed+0x20>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d104      	bne.n	800169a <isbutton3pressed+0x16>
		button3_flag = 0;
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <isbutton3pressed+0x20>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
		return 1;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <isbutton3pressed+0x18>
	}
	return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	200000a8 	.word	0x200000a8

080016a8 <subKeybutton1Process>:

//sub key
void subKeybutton1Process(){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <subKeybutton1Process+0x14>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200000a0 	.word	0x200000a0

080016c0 <subKeybutton2Process>:
void subKeybutton2Process(){
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <subKeybutton2Process+0x14>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200000a4 	.word	0x200000a4

080016d8 <subKeybutton3Process>:
void subKeybutton3Process(){
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <subKeybutton3Process+0x14>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200000a8 	.word	0x200000a8

080016f0 <getKeyinputButton1>:
		getKeyinputButton1();
		getKeyinputButton2();
		getKeyinputButton3();
}

void getKeyinputButton1(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	KeyRegbutton1_0 = KeyRegbutton1_1;
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <getKeyinputButton1+0x90>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <getKeyinputButton1+0x94>)
 80016fa:	6013      	str	r3, [r2, #0]
	KeyRegbutton1_1 = KeyRegbutton1_2;
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <getKeyinputButton1+0x98>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <getKeyinputButton1+0x90>)
 8001702:	6013      	str	r3, [r2, #0]
	KeyRegbutton1_2 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	4821      	ldr	r0, [pc, #132]	; (800178c <getKeyinputButton1+0x9c>)
 8001708:	f000 fea0 	bl	800244c <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <getKeyinputButton1+0x98>)
 8001712:	601a      	str	r2, [r3, #0]
	if((KeyRegbutton1_0 == KeyRegbutton1_1) && (KeyRegbutton1_1 == KeyRegbutton1_2)){
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <getKeyinputButton1+0x94>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <getKeyinputButton1+0x90>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d12d      	bne.n	800177c <getKeyinputButton1+0x8c>
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <getKeyinputButton1+0x90>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <getKeyinputButton1+0x98>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d127      	bne.n	800177c <getKeyinputButton1+0x8c>
		if(KeyRegbutton1_3 != KeyRegbutton1_2){
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <getKeyinputButton1+0xa0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <getKeyinputButton1+0x98>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d00e      	beq.n	8001756 <getKeyinputButton1+0x66>
			KeyRegbutton1_3 = KeyRegbutton1_2;
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <getKeyinputButton1+0x98>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <getKeyinputButton1+0xa0>)
 800173e:	6013      	str	r3, [r2, #0]
			if(KeyRegbutton1_2 == PRESSED_STATE){
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <getKeyinputButton1+0x98>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d119      	bne.n	800177c <getKeyinputButton1+0x8c>
				//TODO
				subKeybutton1Process();
 8001748:	f7ff ffae 	bl	80016a8 <subKeybutton1Process>
				TimerForKeybutton1Press = HoldTimer;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <getKeyinputButton1+0xa4>)
 800174e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001752:	601a      	str	r2, [r3, #0]
				}
				TimerForKeybutton1Press = HoldTimer;
			}
		}
	}
}
 8001754:	e012      	b.n	800177c <getKeyinputButton1+0x8c>
			TimerForKeybutton1Press--;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <getKeyinputButton1+0xa4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <getKeyinputButton1+0xa4>)
 800175e:	6013      	str	r3, [r2, #0]
			if(TimerForKeybutton1Press == 0){
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <getKeyinputButton1+0xa4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <getKeyinputButton1+0x8c>
				if(KeyRegbutton1_2 == PRESSED_STATE){
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <getKeyinputButton1+0x98>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <getKeyinputButton1+0x84>
					subKeybutton1Process();
 8001770:	f7ff ff9a 	bl	80016a8 <subKeybutton1Process>
				TimerForKeybutton1Press = HoldTimer;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <getKeyinputButton1+0xa4>)
 8001776:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000002c 	.word	0x2000002c
 8001784:	20000028 	.word	0x20000028
 8001788:	20000030 	.word	0x20000030
 800178c:	40010800 	.word	0x40010800
 8001790:	20000034 	.word	0x20000034
 8001794:	20000024 	.word	0x20000024

08001798 <getKeyinputButton2>:

void getKeyinputButton2(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	KeyRegbutton2_0 = KeyRegbutton2_1;
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <getKeyinputButton2+0x94>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a23      	ldr	r2, [pc, #140]	; (8001830 <getKeyinputButton2+0x98>)
 80017a2:	6013      	str	r3, [r2, #0]
	KeyRegbutton2_1 = KeyRegbutton2_2;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <getKeyinputButton2+0x9c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <getKeyinputButton2+0x94>)
 80017aa:	6013      	str	r3, [r2, #0]
	KeyRegbutton2_2 = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 80017ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b0:	4821      	ldr	r0, [pc, #132]	; (8001838 <getKeyinputButton2+0xa0>)
 80017b2:	f000 fe4b 	bl	800244c <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <getKeyinputButton2+0x9c>)
 80017bc:	601a      	str	r2, [r3, #0]
	if((KeyRegbutton2_0 == KeyRegbutton2_1) && (KeyRegbutton2_1 == KeyRegbutton2_2)){
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <getKeyinputButton2+0x98>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <getKeyinputButton2+0x94>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d12d      	bne.n	8001826 <getKeyinputButton2+0x8e>
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <getKeyinputButton2+0x94>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <getKeyinputButton2+0x9c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d127      	bne.n	8001826 <getKeyinputButton2+0x8e>
		if(KeyRegbutton2_3 != KeyRegbutton2_2){
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <getKeyinputButton2+0xa4>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <getKeyinputButton2+0x9c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d00e      	beq.n	8001800 <getKeyinputButton2+0x68>
			KeyRegbutton2_3 = KeyRegbutton2_2;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <getKeyinputButton2+0x9c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <getKeyinputButton2+0xa4>)
 80017e8:	6013      	str	r3, [r2, #0]
			if(KeyRegbutton2_2 == PRESSED_STATE){
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <getKeyinputButton2+0x9c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d119      	bne.n	8001826 <getKeyinputButton2+0x8e>
				//TODO
				subKeybutton2Process();
 80017f2:	f7ff ff65 	bl	80016c0 <subKeybutton2Process>
				TimerForKeybutton2Press = HoldTimer;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <getKeyinputButton2+0xa8>)
 80017f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017fc:	601a      	str	r2, [r3, #0]
				}
				TimerForKeybutton2Press = HoldTimer;
			}
		}
	}
}
 80017fe:	e012      	b.n	8001826 <getKeyinputButton2+0x8e>
			TimerForKeybutton2Press--;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <getKeyinputButton2+0xa8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <getKeyinputButton2+0xa8>)
 8001808:	6013      	str	r3, [r2, #0]
			if(TimerForKeybutton2Press == 0){
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <getKeyinputButton2+0xa8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <getKeyinputButton2+0x8e>
				if(KeyRegbutton2_2 == PRESSED_STATE){
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <getKeyinputButton2+0x9c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <getKeyinputButton2+0x86>
					subKeybutton2Process();
 800181a:	f7ff ff51 	bl	80016c0 <subKeybutton2Process>
				TimerForKeybutton2Press = HoldTimer;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <getKeyinputButton2+0xa8>)
 8001820:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000040 	.word	0x20000040
 8001830:	2000003c 	.word	0x2000003c
 8001834:	20000044 	.word	0x20000044
 8001838:	40010800 	.word	0x40010800
 800183c:	20000048 	.word	0x20000048
 8001840:	20000038 	.word	0x20000038

08001844 <getKeyinputButton3>:

void getKeyinputButton3(){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	KeyRegbutton3_0 = KeyRegbutton3_1;
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <getKeyinputButton3+0x94>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a23      	ldr	r2, [pc, #140]	; (80018dc <getKeyinputButton3+0x98>)
 800184e:	6013      	str	r3, [r2, #0]
	KeyRegbutton3_1 = KeyRegbutton3_2;
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <getKeyinputButton3+0x9c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <getKeyinputButton3+0x94>)
 8001856:	6013      	str	r3, [r2, #0]
	KeyRegbutton3_2 = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8001858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185c:	4821      	ldr	r0, [pc, #132]	; (80018e4 <getKeyinputButton3+0xa0>)
 800185e:	f000 fdf5 	bl	800244c <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <getKeyinputButton3+0x9c>)
 8001868:	601a      	str	r2, [r3, #0]
	if((KeyRegbutton3_0 == KeyRegbutton3_1) && (KeyRegbutton3_1 == KeyRegbutton3_2)){
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <getKeyinputButton3+0x98>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <getKeyinputButton3+0x94>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d12d      	bne.n	80018d2 <getKeyinputButton3+0x8e>
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <getKeyinputButton3+0x94>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <getKeyinputButton3+0x9c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d127      	bne.n	80018d2 <getKeyinputButton3+0x8e>
		if(KeyRegbutton3_3 != KeyRegbutton3_2){
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <getKeyinputButton3+0xa4>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <getKeyinputButton3+0x9c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d00e      	beq.n	80018ac <getKeyinputButton3+0x68>
			KeyRegbutton3_3 = KeyRegbutton3_2;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <getKeyinputButton3+0x9c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <getKeyinputButton3+0xa4>)
 8001894:	6013      	str	r3, [r2, #0]
			if(KeyRegbutton3_2 == PRESSED_STATE){
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <getKeyinputButton3+0x9c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <getKeyinputButton3+0x8e>
				//TODO
				subKeybutton3Process();
 800189e:	f7ff ff1b 	bl	80016d8 <subKeybutton3Process>
				TimerForKeybutton3Press = HoldTimer;
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <getKeyinputButton3+0xa8>)
 80018a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018a8:	601a      	str	r2, [r3, #0]
				}
				TimerForKeybutton3Press = HoldTimer;
			}
		}
	}
}
 80018aa:	e012      	b.n	80018d2 <getKeyinputButton3+0x8e>
			TimerForKeybutton3Press--;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <getKeyinputButton3+0xa8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <getKeyinputButton3+0xa8>)
 80018b4:	6013      	str	r3, [r2, #0]
			if(TimerForKeybutton3Press == 0){
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <getKeyinputButton3+0xa8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <getKeyinputButton3+0x8e>
				if(KeyRegbutton3_2 == PRESSED_STATE){
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <getKeyinputButton3+0x9c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <getKeyinputButton3+0x86>
					subKeybutton3Process();
 80018c6:	f7ff ff07 	bl	80016d8 <subKeybutton3Process>
				TimerForKeybutton3Press = HoldTimer;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <getKeyinputButton3+0xa8>)
 80018cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000054 	.word	0x20000054
 80018dc:	20000050 	.word	0x20000050
 80018e0:	20000058 	.word	0x20000058
 80018e4:	40010800 	.word	0x40010800
 80018e8:	2000005c 	.word	0x2000005c
 80018ec:	2000004c 	.word	0x2000004c

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f4:	f000 fac0 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f000 f82e 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fc:	f000 f8b4 	bl	8001a68 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001900:	f000 f866 	bl	80019d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <main+0x60>)
 8001906:	f001 fa09 	bl	8002d1c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(status_mode == MODE1){
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <main+0x64>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b15      	cmp	r3, #21
 8001910:	d103      	bne.n	800191a <main+0x2a>
	  setTimer1(100);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f000 f922 	bl	8001b5c <setTimer1>
 8001918:	e012      	b.n	8001940 <main+0x50>
  } else if(status_mode == MODE2){
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <main+0x64>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b16      	cmp	r3, #22
 8001920:	d103      	bne.n	800192a <main+0x3a>
	  setTimer2(100);
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	f000 f936 	bl	8001b94 <setTimer2>
 8001928:	e00a      	b.n	8001940 <main+0x50>
  } else if(status_mode == MODE3){
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <main+0x64>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b17      	cmp	r3, #23
 8001930:	d103      	bne.n	800193a <main+0x4a>
	  setTimer3(100);
 8001932:	2064      	movs	r0, #100	; 0x64
 8001934:	f000 f94a 	bl	8001bcc <setTimer3>
 8001938:	e002      	b.n	8001940 <main+0x50>
  } else {
	  setTimer4(100);
 800193a:	2064      	movs	r0, #100	; 0x64
 800193c:	f000 f962 	bl	8001c04 <setTimer4>
  }


  while (1)
  {
	  fsm_mode_run();
 8001940:	f7ff fdda 	bl	80014f8 <fsm_mode_run>
	  fsm_button_run();
 8001944:	f7ff fe3e 	bl	80015c4 <fsm_button_run>
	  display();
 8001948:	f7fe fe70 	bl	800062c <display>
	  fsm_mode_run();
 800194c:	e7f8      	b.n	8001940 <main+0x50>
 800194e:	bf00      	nop
 8001950:	200000d4 	.word	0x200000d4
 8001954:	20000004 	.word	0x20000004

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b090      	sub	sp, #64	; 0x40
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	2228      	movs	r2, #40	; 0x28
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fd90 	bl	800348c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197e:	2301      	movs	r3, #1
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001982:	2310      	movs	r3, #16
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fd8c 	bl	80024ac <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800199a:	f000 f8d9 	bl	8001b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fff8 	bl	80029ac <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019c2:	f000 f8c5 	bl	8001b50 <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3740      	adds	r7, #64	; 0x40
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM2_Init+0x94>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_TIM2_Init+0x94>)
 80019f6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_TIM2_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a04:	2209      	movs	r2, #9
 8001a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a16:	f001 f931 	bl	8002c7c <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a20:	f000 f896 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a32:	f001 fac7 	bl	8002fc4 <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a3c:	f000 f888 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a4e:	f001 fc8f 	bl	8003370 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 f87a 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200000d4 	.word	0x200000d4

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7v_0_Pin|LED7v_1_Pin|LED7v_2_Pin|LED7v_3_Pin
 8001aac:	2200      	movs	r2, #0
 8001aae:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8001ab2:	481d      	ldr	r0, [pc, #116]	; (8001b28 <MX_GPIO_Init+0xc0>)
 8001ab4:	f000 fce1 	bl	800247a <HAL_GPIO_WritePin>
                          |LED7v_4_Pin|LED7v_5_Pin|LED7v_6_Pin|red_horizontal_Pin
                          |yellow_horizontal_Pin|green_horizontal_Pin|red_vertical_Pin|yellow_vertical_Pin
                          |green_vertical_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7h_0_Pin|LED7h_1_Pin|LED7h_2_Pin|MODE_LED7_2_Pin
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001abe:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MX_GPIO_Init+0xc4>)
 8001ac0:	f000 fcdb 	bl	800247a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED7v_0_Pin LED7v_1_Pin LED7v_2_Pin LED7v_3_Pin
                           LED7v_4_Pin LED7v_5_Pin LED7v_6_Pin red_horizontal_Pin
                           yellow_horizontal_Pin green_horizontal_Pin red_vertical_Pin yellow_vertical_Pin
                           green_vertical_Pin */
  GPIO_InitStruct.Pin = LED7v_0_Pin|LED7v_1_Pin|LED7v_2_Pin|LED7v_3_Pin
 8001ac4:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8001ac8:	60bb      	str	r3, [r7, #8]
                          |LED7v_4_Pin|LED7v_5_Pin|LED7v_6_Pin|red_horizontal_Pin
                          |yellow_horizontal_Pin|green_horizontal_Pin|red_vertical_Pin|yellow_vertical_Pin
                          |green_vertical_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4619      	mov	r1, r3
 8001adc:	4812      	ldr	r0, [pc, #72]	; (8001b28 <MX_GPIO_Init+0xc0>)
 8001ade:	f000 fb3b 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001ae2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_GPIO_Init+0xc0>)
 8001af8:	f000 fb2e 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7h_0_Pin LED7h_1_Pin LED7h_2_Pin MODE_LED7_2_Pin
                           MODE_LED7_3_Pin MODE_LED7_4_Pin MODE_LED7_5_Pin MODE_LED7_6_Pin
                           EN1_Pin LED7h_3_Pin LED7h_4_Pin LED7h_5_Pin
                           LED7h_6_Pin EN0_Pin MODE_LED7_0_Pin MODE_LED7_1_Pin */
  GPIO_InitStruct.Pin = LED7h_0_Pin|LED7h_1_Pin|LED7h_2_Pin|MODE_LED7_2_Pin
 8001afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b00:	60bb      	str	r3, [r7, #8]
                          |MODE_LED7_3_Pin|MODE_LED7_4_Pin|MODE_LED7_5_Pin|MODE_LED7_6_Pin
                          |EN1_Pin|LED7h_3_Pin|LED7h_4_Pin|LED7h_5_Pin
                          |LED7h_6_Pin|EN0_Pin|MODE_LED7_0_Pin|MODE_LED7_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_GPIO_Init+0xc4>)
 8001b16:	f000 fb1f 	bl	8002158 <HAL_GPIO_Init>

}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00

08001b30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	timerRun();
 8001b38:	f000 f880 	bl	8001c3c <timerRun>
	getKeyinputButton1();
 8001b3c:	f7ff fdd8 	bl	80016f0 <getKeyinputButton1>
	getKeyinputButton2();
 8001b40:	f7ff fe2a 	bl	8001798 <getKeyinputButton2>
	getKeyinputButton3();
 8001b44:	f7ff fe7e 	bl	8001844 <getKeyinputButton3>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <Error_Handler+0x8>
	...

08001b5c <setTimer1>:
int timer4_flag = 0;

int timerLED_counter = 0;
int timerLED_flag = 0;

void setTimer1(int duration){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <setTimer1+0x2c>)
 8001b68:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6c:	1092      	asrs	r2, r2, #2
 8001b6e:	17db      	asrs	r3, r3, #31
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <setTimer1+0x30>)
 8001b74:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <setTimer1+0x34>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	66666667 	.word	0x66666667
 8001b8c:	200000ac 	.word	0x200000ac
 8001b90:	200000b0 	.word	0x200000b0

08001b94 <setTimer2>:

void setTimer2(int duration){
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <setTimer2+0x2c>)
 8001ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba4:	1092      	asrs	r2, r2, #2
 8001ba6:	17db      	asrs	r3, r3, #31
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <setTimer2+0x30>)
 8001bac:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <setTimer2+0x34>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	66666667 	.word	0x66666667
 8001bc4:	200000b4 	.word	0x200000b4
 8001bc8:	200000b8 	.word	0x200000b8

08001bcc <setTimer3>:

void setTimer3(int duration){
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <setTimer3+0x2c>)
 8001bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bdc:	1092      	asrs	r2, r2, #2
 8001bde:	17db      	asrs	r3, r3, #31
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <setTimer3+0x30>)
 8001be4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <setTimer3+0x34>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	66666667 	.word	0x66666667
 8001bfc:	200000bc 	.word	0x200000bc
 8001c00:	200000c0 	.word	0x200000c0

08001c04 <setTimer4>:
void setTimer4(int duration){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <setTimer4+0x2c>)
 8001c10:	fb82 1203 	smull	r1, r2, r2, r3
 8001c14:	1092      	asrs	r2, r2, #2
 8001c16:	17db      	asrs	r3, r3, #31
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <setTimer4+0x30>)
 8001c1c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <setTimer4+0x34>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	66666667 	.word	0x66666667
 8001c34:	200000c4 	.word	0x200000c4
 8001c38:	200000c8 	.word	0x200000c8

08001c3c <timerRun>:
void setTimerLED(int duration){
	timerLED_counter = duration/TICKLED;
	timerLED_flag = 0;
}
void timerRun(){
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <timerRun+0xac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dd0b      	ble.n	8001c60 <timerRun+0x24>
		timer1_counter--;
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <timerRun+0xac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <timerRun+0xac>)
 8001c50:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <timerRun+0xac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dc02      	bgt.n	8001c60 <timerRun+0x24>
			timer1_flag = 1;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <timerRun+0xb0>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <timerRun+0xb4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	dd0b      	ble.n	8001c80 <timerRun+0x44>
		timer2_counter--;
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <timerRun+0xb4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <timerRun+0xb4>)
 8001c70:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <timerRun+0xb4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dc02      	bgt.n	8001c80 <timerRun+0x44>
			timer2_flag = 1;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <timerRun+0xb8>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <timerRun+0xbc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	dd0b      	ble.n	8001ca0 <timerRun+0x64>
		timer3_counter--;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <timerRun+0xbc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <timerRun+0xbc>)
 8001c90:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <timerRun+0xbc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc02      	bgt.n	8001ca0 <timerRun+0x64>
			timer3_flag = 1;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <timerRun+0xc0>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <timerRun+0xc4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dd0b      	ble.n	8001cc0 <timerRun+0x84>
		timer4_counter--;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <timerRun+0xc4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <timerRun+0xc4>)
 8001cb0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <timerRun+0xc4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dc02      	bgt.n	8001cc0 <timerRun+0x84>
			timer4_flag = 1;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <timerRun+0xc8>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerLED_counter > 0){
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <timerRun+0xcc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dd0b      	ble.n	8001ce0 <timerRun+0xa4>
		timerLED_counter--;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <timerRun+0xcc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <timerRun+0xcc>)
 8001cd0:	6013      	str	r3, [r2, #0]
		if(timerLED_counter <= 0){
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <timerRun+0xcc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dc02      	bgt.n	8001ce0 <timerRun+0xa4>
			timerLED_flag = 1;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <timerRun+0xd0>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	200000ac 	.word	0x200000ac
 8001cec:	200000b0 	.word	0x200000b0
 8001cf0:	200000b4 	.word	0x200000b4
 8001cf4:	200000b8 	.word	0x200000b8
 8001cf8:	200000bc 	.word	0x200000bc
 8001cfc:	200000c0 	.word	0x200000c0
 8001d00:	200000c4 	.word	0x200000c4
 8001d04:	200000c8 	.word	0x200000c8
 8001d08:	200000cc 	.word	0x200000cc
 8001d0c:	200000d0 	.word	0x200000d0

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6193      	str	r3, [r2, #24]
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x5c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_MspInit+0x60>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_MspInit+0x60>)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d113      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x44>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	201c      	movs	r0, #28
 8001da4:	f000 f9a1 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001da8:	201c      	movs	r0, #28
 8001daa:	f000 f9ba 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e02:	f000 f87f 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM2_IRQHandler+0x10>)
 8001e12:	f000 ffcf 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000d4 	.word	0x200000d4

08001e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e52:	f7ff ffe5 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f001 faf5 	bl	8003444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7ff fd49 	bl	80018f0 <main>
  bx lr
 8001e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e68:	080034dc 	.word	0x080034dc
  ldr r2, =_sbss
 8001e6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e70:	20000120 	.word	0x20000120

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_Init+0x28>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_Init+0x28>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f923 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f000 f808 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff ff3c 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f93b 	bl	800213e <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f903 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000060 	.word	0x20000060
 8001efc:	20000068 	.word	0x20000068
 8001f00:	20000064 	.word	0x20000064

08001f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x1c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x20>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_IncTick+0x20>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000068 	.word	0x20000068
 8001f24:	2000011c 	.word	0x2000011c

08001f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <HAL_GetTick+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	2000011c 	.word	0x2000011c

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <__NVIC_EnableIRQ+0x34>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	; (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	; (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff90 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff2d 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff42 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff90 	bl	800202c <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5f 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff35 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b08b      	sub	sp, #44	; 0x2c
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	e148      	b.n	80023fe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800216c:	2201      	movs	r2, #1
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8137 	bne.w	80023f8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4aa3      	ldr	r2, [pc, #652]	; (800241c <HAL_GPIO_Init+0x2c4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d05e      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 8002194:	4aa1      	ldr	r2, [pc, #644]	; (800241c <HAL_GPIO_Init+0x2c4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d875      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 800219a:	4aa1      	ldr	r2, [pc, #644]	; (8002420 <HAL_GPIO_Init+0x2c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d058      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021a0:	4a9f      	ldr	r2, [pc, #636]	; (8002420 <HAL_GPIO_Init+0x2c8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d86f      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021a6:	4a9f      	ldr	r2, [pc, #636]	; (8002424 <HAL_GPIO_Init+0x2cc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d052      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021ac:	4a9d      	ldr	r2, [pc, #628]	; (8002424 <HAL_GPIO_Init+0x2cc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d869      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021b2:	4a9d      	ldr	r2, [pc, #628]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04c      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021b8:	4a9b      	ldr	r2, [pc, #620]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d863      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021be:	4a9b      	ldr	r2, [pc, #620]	; (800242c <HAL_GPIO_Init+0x2d4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d046      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021c4:	4a99      	ldr	r2, [pc, #612]	; (800242c <HAL_GPIO_Init+0x2d4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d85d      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d82a      	bhi.n	8002224 <HAL_GPIO_Init+0xcc>
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d859      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <HAL_GPIO_Init+0x80>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	08002253 	.word	0x08002253
 80021dc:	0800222d 	.word	0x0800222d
 80021e0:	0800223f 	.word	0x0800223f
 80021e4:	08002281 	.word	0x08002281
 80021e8:	08002287 	.word	0x08002287
 80021ec:	08002287 	.word	0x08002287
 80021f0:	08002287 	.word	0x08002287
 80021f4:	08002287 	.word	0x08002287
 80021f8:	08002287 	.word	0x08002287
 80021fc:	08002287 	.word	0x08002287
 8002200:	08002287 	.word	0x08002287
 8002204:	08002287 	.word	0x08002287
 8002208:	08002287 	.word	0x08002287
 800220c:	08002287 	.word	0x08002287
 8002210:	08002287 	.word	0x08002287
 8002214:	08002287 	.word	0x08002287
 8002218:	08002287 	.word	0x08002287
 800221c:	08002235 	.word	0x08002235
 8002220:	08002249 	.word	0x08002249
 8002224:	4a82      	ldr	r2, [pc, #520]	; (8002430 <HAL_GPIO_Init+0x2d8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800222a:	e02c      	b.n	8002286 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e029      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	3304      	adds	r3, #4
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e024      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	3308      	adds	r3, #8
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e01f      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	330c      	adds	r3, #12
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e01a      	b.n	8002288 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800225a:	2304      	movs	r3, #4
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e013      	b.n	8002288 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002268:	2308      	movs	r3, #8
 800226a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	611a      	str	r2, [r3, #16]
          break;
 8002272:	e009      	b.n	8002288 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002274:	2308      	movs	r3, #8
 8002276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	615a      	str	r2, [r3, #20]
          break;
 800227e:	e003      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x130>
          break;
 8002286:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d801      	bhi.n	8002292 <HAL_GPIO_Init+0x13a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_Init+0x13e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d802      	bhi.n	80022a4 <HAL_GPIO_Init+0x14c>
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	e002      	b.n	80022aa <HAL_GPIO_Init+0x152>
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	3b08      	subs	r3, #8
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	210f      	movs	r1, #15
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	6a39      	ldr	r1, [r7, #32]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8090 	beq.w	80023f8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022d8:	4b56      	ldr	r3, [pc, #344]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a55      	ldr	r2, [pc, #340]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022f0:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_GPIO_Init+0x2e0>)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a49      	ldr	r2, [pc, #292]	; (800243c <HAL_GPIO_Init+0x2e4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00d      	beq.n	8002338 <HAL_GPIO_Init+0x1e0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <HAL_GPIO_Init+0x1dc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a47      	ldr	r2, [pc, #284]	; (8002444 <HAL_GPIO_Init+0x2ec>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_GPIO_Init+0x1d8>
 800232c:	2302      	movs	r3, #2
 800232e:	e004      	b.n	800233a <HAL_GPIO_Init+0x1e2>
 8002330:	2303      	movs	r3, #3
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x1e2>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_GPIO_Init+0x1e2>
 8002338:	2300      	movs	r3, #0
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	f002 0203 	and.w	r2, r2, #3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4093      	lsls	r3, r2
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800234a:	493b      	ldr	r1, [pc, #236]	; (8002438 <HAL_GPIO_Init+0x2e0>)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002364:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002372:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	43db      	mvns	r3, r3
 800237a:	4933      	ldr	r1, [pc, #204]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 800237c:	4013      	ands	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	492d      	ldr	r1, [pc, #180]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4929      	ldr	r1, [pc, #164]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4923      	ldr	r1, [pc, #140]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	491f      	ldr	r1, [pc, #124]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4919      	ldr	r1, [pc, #100]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4915      	ldr	r1, [pc, #84]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3301      	adds	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f aeaf 	bne.w	800216c <HAL_GPIO_Init+0x14>
  }
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	372c      	adds	r7, #44	; 0x2c
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	10320000 	.word	0x10320000
 8002420:	10310000 	.word	0x10310000
 8002424:	10220000 	.word	0x10220000
 8002428:	10210000 	.word	0x10210000
 800242c:	10120000 	.word	0x10120000
 8002430:	10110000 	.word	0x10110000
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000
 800243c:	40010800 	.word	0x40010800
 8002440:	40010c00 	.word	0x40010c00
 8002444:	40011000 	.word	0x40011000
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e001      	b.n	800246e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
 8002486:	4613      	mov	r3, r2
 8002488:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	041a      	lsls	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	611a      	str	r2, [r3, #16]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e26c      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024cc:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
 80024e4:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	4b89      	ldr	r3, [pc, #548]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d06c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x12c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d168      	bne.n	80025d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e246      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x76>
 8002514:	4b80      	ldr	r3, [pc, #512]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7f      	ldr	r2, [pc, #508]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e02e      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b78      	ldr	r3, [pc, #480]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a77      	ldr	r2, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xbc>
 800254e:	4b72      	ldr	r3, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a71      	ldr	r2, [pc, #452]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002568:	4b6b      	ldr	r3, [pc, #428]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6a      	ldr	r2, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fcce 	bl	8001f28 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fcca 	bl	8001f28 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1fa      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe4>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fcba 	bl	8001f28 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fcb6 	bl	8001f28 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1e6      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x10c>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e6:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x18c>
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1ba      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4939      	ldr	r1, [pc, #228]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7ff fc6f 	bl	8001f28 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7ff fc6b 	bl	8001f28 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e19b      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4927      	ldr	r1, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fc4e 	bl	8001f28 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7ff fc4a 	bl	8001f28 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e17a      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03a      	beq.n	8002730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7ff fc2e 	bl	8001f28 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7ff fc2a 	bl	8001f28 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e15a      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f000 faa6 	bl	8002c40 <RCC_Delay>
 80026f4:	e01c      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7ff fc14 	bl	8001f28 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002702:	e00f      	b.n	8002724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7ff fc10 	bl	8001f28 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d908      	bls.n	8002724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e140      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	42420000 	.word	0x42420000
 8002720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e9      	bne.n	8002704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a6 	beq.w	800288a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b97      	ldr	r3, [pc, #604]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a93      	ldr	r2, [pc, #588]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]
 800275a:	4b91      	ldr	r3, [pc, #580]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a8a      	ldr	r2, [pc, #552]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7ff fbd1 	bl	8001f28 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7ff fbcd 	bl	8001f28 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0fd      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x312>
 80027b0:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	e02d      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x334>
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a75      	ldr	r2, [pc, #468]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a72      	ldr	r2, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	e01c      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x356>
 80027e8:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4a6c      	ldr	r2, [pc, #432]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a69      	ldr	r2, [pc, #420]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7ff fb81 	bl	8001f28 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7ff fb7d 	bl	8001f28 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ab      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCC_OscConfig+0x37e>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7ff fb6b 	bl	8001f28 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7ff fb67 	bl	8001f28 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e095      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8081 	beq.w	8002996 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d061      	beq.n	8002964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d146      	bne.n	8002936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7ff fb3b 	bl	8001f28 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7ff fb37 	bl	8001f28 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e067      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d108      	bne.n	80028f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	492d      	ldr	r1, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a19      	ldr	r1, [r3, #32]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	430b      	orrs	r3, r1
 8002902:	4927      	ldr	r1, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7ff fb0b 	bl	8001f28 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7ff fb07 	bl	8001f28 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e037      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x46a>
 8002934:	e02f      	b.n	8002996 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff faf4 	bl	8001f28 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7ff faf0 	bl	8001f28 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e020      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x498>
 8002962:	e018      	b.n	8002996 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e013      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420060 	.word	0x42420060

080029ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0d0      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4965      	ldr	r1, [pc, #404]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b8      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a20:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	494d      	ldr	r1, [pc, #308]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d040      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e073      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06b      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4936      	ldr	r1, [pc, #216]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7ff fa44 	bl	8001f28 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7ff fa40 	bl	8001f28 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e053      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4922      	ldr	r1, [pc, #136]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e032      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4916      	ldr	r1, [pc, #88]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3a:	f000 f821 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490a      	ldr	r1, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1cc>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f9a2 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	080034c4 	.word	0x080034c4
 8002b78:	20000060 	.word	0x20000060
 8002b7c:	20000064 	.word	0x20000064

08002b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	b490      	push	{r4, r7}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b88:	1d3c      	adds	r4, r7, #4
 8002b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b90:	f240 2301 	movw	r3, #513	; 0x201
 8002b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bbe:	e02d      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	e02d      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c5b      	lsrs	r3, r3, #17
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfe:	fb02 f203 	mul.w	r2, r2, r3
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e004      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	623b      	str	r3, [r7, #32]
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1e:	623b      	str	r3, [r7, #32]
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	6a3b      	ldr	r3, [r7, #32]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc90      	pop	{r4, r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	080034b4 	.word	0x080034b4
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	003d0900 	.word	0x003d0900

08002c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <RCC_Delay+0x34>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <RCC_Delay+0x38>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c5c:	bf00      	nop
  }
  while (Delay --);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1e5a      	subs	r2, r3, #1
 8002c62:	60fa      	str	r2, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f9      	bne.n	8002c5c <RCC_Delay+0x1c>
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000060 	.word	0x20000060
 8002c78:	10624dd3 	.word	0x10624dd3

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e041      	b.n	8002d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff f866 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fa6a 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d001      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e035      	b.n	8002da0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a16      	ldr	r2, [pc, #88]	; (8002dac <HAL_TIM_Base_Start_IT+0x90>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x4e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIM_Base_Start_IT+0x4e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_TIM_Base_Start_IT+0x94>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d111      	bne.n	8002d8e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d010      	beq.n	8002d9e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	e007      	b.n	8002d9e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400

08002db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0202 	mvn.w	r2, #2
 8002de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9b1 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9a4 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f9b3 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0204 	mvn.w	r2, #4
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f987 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f97a 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f989 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0208 	mvn.w	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f95d 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f950 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f95f 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0210 	mvn.w	r2, #16
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f933 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f926 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f935 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0201 	mvn.w	r2, #1
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe fdfc 	bl	8001b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b80      	cmp	r3, #128	; 0x80
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa67 	bl	8003432 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8f9 	bl	8003182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0220 	mvn.w	r2, #32
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa32 	bl	8003420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIM_ConfigClockSource+0x18>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0b3      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x180>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003002:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003014:	d03e      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0xd0>
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301a:	f200 8087 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x168>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	f000 8085 	beq.w	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d87f      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b70      	cmp	r3, #112	; 0x70
 800302e:	d01a      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0xa2>
 8003030:	2b70      	cmp	r3, #112	; 0x70
 8003032:	d87b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b60      	cmp	r3, #96	; 0x60
 8003036:	d050      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x116>
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d877      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b50      	cmp	r3, #80	; 0x50
 800303e:	d03c      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xf6>
 8003040:	2b50      	cmp	r3, #80	; 0x50
 8003042:	d873      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d058      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x136>
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d86f      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 800304c:	2b30      	cmp	r3, #48	; 0x30
 800304e:	d064      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x156>
 8003050:	2b30      	cmp	r3, #48	; 0x30
 8003052:	d86b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d060      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x156>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d867      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x168>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05c      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x156>
 8003060:	2b10      	cmp	r3, #16
 8003062:	d05a      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003064:	e062      	b.n	800312c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f000 f95c 	bl	8003332 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003088:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	609a      	str	r2, [r3, #8]
      break;
 8003092:	e04e      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f000 f945 	bl	8003332 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b6:	609a      	str	r2, [r3, #8]
      break;
 80030b8:	e03b      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 f8bc 	bl	8003244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2150      	movs	r1, #80	; 0x50
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f913 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 80030d8:	e02b      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 f8da 	bl	80032a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2160      	movs	r1, #96	; 0x60
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f903 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 80030f8:	e01b      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	f000 f89c 	bl	8003244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f8f3 	bl	80032fe <TIM_ITRx_SetConfig>
      break;
 8003118:	e00b      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f000 f8ea 	bl	80032fe <TIM_ITRx_SetConfig>
        break;
 800312a:	e002      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a25      	ldr	r2, [pc, #148]	; (800323c <TIM_Base_SetConfig+0xa8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <TIM_Base_SetConfig+0x28>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b2:	d003      	beq.n	80031bc <TIM_Base_SetConfig+0x28>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a22      	ldr	r2, [pc, #136]	; (8003240 <TIM_Base_SetConfig+0xac>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d108      	bne.n	80031ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <TIM_Base_SetConfig+0xa8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0x52>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0x52>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a17      	ldr	r2, [pc, #92]	; (8003240 <TIM_Base_SetConfig+0xac>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <TIM_Base_SetConfig+0xa8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400

08003244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0201 	bic.w	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 030a 	bic.w	r3, r3, #10
 8003280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 0210 	bic.w	r2, r3, #16
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	031b      	lsls	r3, r3, #12
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	f043 0307 	orr.w	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800334c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	021a      	lsls	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	431a      	orrs	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003384:	2302      	movs	r3, #2
 8003386:	e041      	b.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a14      	ldr	r2, [pc, #80]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d004      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a10      	ldr	r2, [pc, #64]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10c      	bne.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400

08003420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <__libc_init_array>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	2600      	movs	r6, #0
 8003448:	4d0c      	ldr	r5, [pc, #48]	; (800347c <__libc_init_array+0x38>)
 800344a:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <__libc_init_array+0x3c>)
 800344c:	1b64      	subs	r4, r4, r5
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	42a6      	cmp	r6, r4
 8003452:	d109      	bne.n	8003468 <__libc_init_array+0x24>
 8003454:	f000 f822 	bl	800349c <_init>
 8003458:	2600      	movs	r6, #0
 800345a:	4d0a      	ldr	r5, [pc, #40]	; (8003484 <__libc_init_array+0x40>)
 800345c:	4c0a      	ldr	r4, [pc, #40]	; (8003488 <__libc_init_array+0x44>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	42a6      	cmp	r6, r4
 8003464:	d105      	bne.n	8003472 <__libc_init_array+0x2e>
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	f855 3b04 	ldr.w	r3, [r5], #4
 800346c:	4798      	blx	r3
 800346e:	3601      	adds	r6, #1
 8003470:	e7ee      	b.n	8003450 <__libc_init_array+0xc>
 8003472:	f855 3b04 	ldr.w	r3, [r5], #4
 8003476:	4798      	blx	r3
 8003478:	3601      	adds	r6, #1
 800347a:	e7f2      	b.n	8003462 <__libc_init_array+0x1e>
 800347c:	080034d4 	.word	0x080034d4
 8003480:	080034d4 	.word	0x080034d4
 8003484:	080034d4 	.word	0x080034d4
 8003488:	080034d8 	.word	0x080034d8

0800348c <memset>:
 800348c:	4603      	mov	r3, r0
 800348e:	4402      	add	r2, r0
 8003490:	4293      	cmp	r3, r2
 8003492:	d100      	bne.n	8003496 <memset+0xa>
 8003494:	4770      	bx	lr
 8003496:	f803 1b01 	strb.w	r1, [r3], #1
 800349a:	e7f9      	b.n	8003490 <memset+0x4>

0800349c <_init>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	bf00      	nop
 80034a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a2:	bc08      	pop	{r3}
 80034a4:	469e      	mov	lr, r3
 80034a6:	4770      	bx	lr

080034a8 <_fini>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr
