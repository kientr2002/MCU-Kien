/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  int point = 0;
  int count_red_1 = 5;
  int count_yellow_1 = 2;
  int count_green_1 = 3;
  int count_red_2 = 5;
  int count_yellow_2 = 2;
  int count_green_2 = 3;
//  int counter_vertical = 5;
  int counter_horizontal = 3;
//  int convert_vertical = 0;
  int convert_horizontal = 0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(point == 0){
	  		  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
	  		  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
	  		  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
	  		  HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
	  		  if(count_green_2 > 0){
	  			  HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
	  			  HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
	  			  count_green_2--;
	  		  } else if (count_yellow_2 > 0){
	  			  HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
	  			  HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
	  			  count_yellow_2--;
	  		  } else {
	  			  //Nothing
	  		  }
	  		  if(count_red_1 > 1){
	  			  count_red_1--;
	  		  } else {
	  			  count_red_1 = 5;
	  			count_green_2 = 3;
	  			count_yellow_2 = 2;
	  			  point = 1;
	  		  }

	  	  } else {
	  		  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
	  		  HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin,  GPIO_PIN_RESET);
	  		  HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin,  GPIO_PIN_SET);
	  		  HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,  GPIO_PIN_SET);
	  		  if(count_green_1 > 0){
	  			  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
	  			  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
	  			  count_green_1--;
	  		  } else if(count_yellow_1 > 0){
	  			  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
	  			  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
	  			  count_yellow_1--;
	  		  } else {
	  			  //nothing
	  		  }
	  		  if(count_red_2 > 1){
	  			  count_red_2--;
	  		  } else {
	  			  count_red_2 = 5;
	  			  count_green_1 = 3;
	  			  count_yellow_1 = 2;
	  			  point = 0;
	  		  }

	  	  }
	  // LED 7 segment counter for traffic light in vertical
//	  	  if(counter_vertical == 1 && convert_vertical == 0){
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, SET);
//	  				  counter_vertical = 3;
//	  				  convert_vertical = 1;
//	  	  } else if(counter_vertical == 1 && convert_vertical == 1){
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, SET);
//				  counter_vertical = 2;
//				  convert_vertical = 2;
//  	  	  }else if(counter_vertical == 1 && convert_vertical == 2){
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, SET);
//			  counter_vertical = 5;
//			  convert_vertical = 0;
//	  	  }else if( counter_vertical ==2){
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
//			  counter_vertical--;
//	  	  } else if(counter_vertical == 3){
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
//			  counter_vertical--;
//	  	  } else if(counter_vertical == 4){
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
//			  counter_vertical--;
//	  	  } else{
//	  	  	  HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
//			  HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
//			  HAL_GPIO_WritePin(LED7_7_GPIO_Port, LED7_7_Pin, RESET);
//			  counter_vertical--;
//	  	  }
// LED 7 segment counter for traffic light in horizontal
	  	  if(counter_horizontal == 1 && convert_horizontal == 0){
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, SET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, SET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, SET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, SET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, SET);
	  				  counter_horizontal = 2;
	  				  convert_horizontal = 1;
	  	  } else if(counter_horizontal == 1 && convert_horizontal == 1){
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, SET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, SET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, SET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, SET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, SET);
				  counter_horizontal = 5;
				  convert_horizontal = 2;
  	  	  }else if(counter_horizontal == 1 && convert_horizontal == 2){
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, SET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, SET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, SET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, SET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, SET);
			  counter_horizontal = 3;
			  convert_horizontal = 0;
	  	  }else if( counter_horizontal ==2){
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, SET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, SET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, RESET);
			  counter_horizontal--;
	  	  } else if(counter_horizontal == 3){
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, SET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, SET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, RESET);
			  counter_horizontal--;
	  	  } else if(counter_horizontal == 4){
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, SET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, SET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, SET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, RESET);
			  counter_horizontal--;
	  	  } else{
	  	  	  HAL_GPIO_WritePin(LED7_8_GPIO_Port, LED7_8_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_9_GPIO_Port, LED7_9_Pin, SET);
			  HAL_GPIO_WritePin(LED7_10_GPIO_Port, LED7_10_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_11_GPIO_Port, LED7_11_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_12_GPIO_Port, LED7_12_Pin, SET);
			  HAL_GPIO_WritePin(LED7_13_GPIO_Port, LED7_13_Pin, RESET);
			  HAL_GPIO_WritePin(LED7_14_GPIO_Port, LED7_14_Pin, RESET);
			  counter_horizontal--;
	  	  }

	  	  HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_1_Pin|LED7_2_Pin|LED7_3_Pin|LED7_11_Pin
                          |LED7_12_Pin|LED7_13_Pin|LED7_14_Pin|LED7_4_Pin
                          |LED7_5_Pin|LED7_6_Pin|LED7_7_Pin|LED7_8_Pin
                          |LED7_9_Pin|LED7_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED7_1_Pin LED7_2_Pin LED7_3_Pin LED7_11_Pin
                           LED7_12_Pin LED7_13_Pin LED7_14_Pin LED7_4_Pin
                           LED7_5_Pin LED7_6_Pin LED7_7_Pin LED7_8_Pin
                           LED7_9_Pin LED7_10_Pin */
  GPIO_InitStruct.Pin = LED7_1_Pin|LED7_2_Pin|LED7_3_Pin|LED7_11_Pin
                          |LED7_12_Pin|LED7_13_Pin|LED7_14_Pin|LED7_4_Pin
                          |LED7_5_Pin|LED7_6_Pin|LED7_7_Pin|LED7_8_Pin
                          |LED7_9_Pin|LED7_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
